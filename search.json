[{"path":[]},{"path":"/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported project lead. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to the ‘matrixStats’ package","title":"Contributing to the ‘matrixStats’ package","text":"Git repository uses Git Flow branching model (git flow extension useful ). develop branch contains latest contributions code appear next release, master branch contains code latest release, exactly currently CRAN. Contributing package easy. Just send pull request. send PR, make sure develop destination branch matrixStats repository. PR pass R CMD check ---cran, also checked GitHub Actions, Travis CI, AppVeyor CI PR submitted. abide Code Conduct Contributor Covenant.","code":""},{"path":"/OVERVIEW.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"NA","text":"matrixStats package provides highly optimized functions computing common summaries rows columns matrices, e.g. rowQuantiles(). also functions operate vectors, e.g. logSumExp(). implementations strive minimize memory usage processing time. often remarkably faster compared good old apply() solutions. calculations mostly implemented C, allow us optimize beyond possible plain R. package installs ---box common operating systems, including Linux, macOS Windows.","code":""},{"path":"/OVERVIEW.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"NA","text":"matrix many times faster calculate medians column column using using Moreover, performing calculations subset rows /columns, using much faster memory efficient ","code":"> x <- matrix(rnorm(20 * 500), nrow = 20, ncol = 500) > mu <- matrixStats::colMedians(x) > mu <- apply(x, MARGIN = 2, FUN = median) > mu <- colMedians(x, rows = 33:158, cols = 1001:3000) > mu <- apply(x[33:158, 1001:3000], MARGIN = 2, FUN = median)"},{"path":"/OVERVIEW.html","id":"benchmarks","dir":"","previous_headings":"","what":"Benchmarks","title":"NA","text":"formal benchmarking matrixStats functions relative alternatives, see Benchmark reports.","code":""},{"path":"/OVERVIEW.html","id":"design-goals","dir":"","previous_headings":"","what":"Design goals","title":"NA","text":"objectives matrixStats package perform operations matrices () faster possible, (ii) using unnecessary amounts memory. objectives drive design, including choice different defaults.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Henrik Bengtsson. Author, maintainer, copyright holder. Constantin Ahlmann-Eltze. Contributor. Hector Corrada Bravo. Contributor. Robert Gentleman. Contributor. Jan Gleixner. Contributor. Peter Hickey. Contributor. Ola Hossjer. Contributor. Harris Jaffee. Contributor. Dongcan Jiang. Contributor. Peter Langfelder. Contributor. Brian Montgomery. Contributor. Angelina Panagopoulou. Contributor. Hugh Parsonage. Contributor. Jakob Peder Pettersen. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bengtsson H (2023). matrixStats: Functions Apply Rows Columns Matrices (Vectors). R package version 1.1.0-9004, https://github.com/HenrikBengtsson/matrixStats.","code":"@Manual{,   title = {matrixStats: Functions that Apply to Rows and Columns of Matrices (and to Vectors)},   author = {Henrik Bengtsson},   year = {2023},   note = {R package version 1.1.0-9004},   url = {https://github.com/HenrikBengtsson/matrixStats}, }"},{"path":"/index.html","id":"matrixstats-functions-that-apply-to-rows-and-columns-of-matrices-and-to-vectors","dir":"","previous_headings":"","what":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"Include URL GitHub link original R package came . Include URL deployed website Part 1E, something like https://jhu-statprogramming-fall-2022.github.io/biostat840-project3-pkgdown-. Include description 5 things customized pkgdown website (excluding adding example data analysis Part 1C).","code":""},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"matrixStats package provides highly optimized functions computing common summaries rows columns matrices, e.g. rowQuantiles(). also functions operate vectors, e.g. logSumExp(). implementations strive minimize memory usage processing time. often remarkably faster compared good old apply() solutions. calculations mostly implemented C, allow us optimize beyond possible plain R. package installs ---box common operating systems, including Linux, macOS Windows.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"matrix many times faster calculate medians column column using using Moreover, performing calculations subset rows /columns, using much faster memory efficient ","code":"> x <- matrix(rnorm(20 * 500), nrow = 20, ncol = 500) > mu <- matrixStats::colMedians(x) > mu <- apply(x, MARGIN = 2, FUN = median) > mu <- colMedians(x, rows = 33:158, cols = 1001:3000) > mu <- apply(x[33:158, 1001:3000], MARGIN = 2, FUN = median)"},{"path":"/index.html","id":"benchmarks","dir":"","previous_headings":"","what":"Benchmarks","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"formal benchmarking matrixStats functions relative alternatives, see Benchmark reports.","code":""},{"path":"/index.html","id":"design-goals","dir":"","previous_headings":"","what":"Design goals","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"objectives matrixStats package perform operations matrices () faster possible, (ii) using unnecessary amounts memory. objectives drive design, including choice different defaults.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"R package matrixStats available CRAN can installed R :","code":"install.packages(\"matrixStats\")"},{"path":"/index.html","id":"pre-release-version","dir":"","previous_headings":"Installation","what":"Pre-release version","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"install pre-release version available Git branch develop GitHub, use: install package source. package also compiles native code, Windows users need Rtools installed macOS users need Xcode installed.","code":"remotes::install_github(\"HenrikBengtsson/matrixStats\", ref=\"develop\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Functions that Apply to Rows and Columns of Matrices (and to Vectors)","text":"contribute package, please see CONTRIBUTING.md.","code":""},{"path":"/reference/allocMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocates an empty vector, matrix or array — allocMatrix","title":"Allocates an empty vector, matrix or array — allocMatrix","text":"Allocates empty vector, matrix array faster corresponding function R.","code":""},{"path":"/reference/allocMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocates an empty vector, matrix or array — allocMatrix","text":"","code":"allocMatrix(nrow, ncol, value = 0, ...)  allocVector(length, value = 0, ...)  allocArray(dim, value = 0, ...)"},{"path":"/reference/allocMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocates an empty vector, matrix or array — allocMatrix","text":"value numeric scalar elements value. length, nrow, ncol, dim numerics specifying dimension created vector, matrix array.","code":""},{"path":"/reference/allocMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocates an empty vector, matrix or array — allocMatrix","text":"Returns vector, matrix array respectively data type value.","code":""},{"path":[]},{"path":"/reference/allocMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Allocates an empty vector, matrix or array — allocMatrix","text":"Henrik Bengtsson","code":""},{"path":"/reference/anyMissing.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if there are any missing values in an object or not — anyMissing","title":"Checks if there are any missing values in an object or not — anyMissing","text":"Checks missing values object . Please use base::anyNA() instead anyMissing(), colAnyNAs() instead colAnyMissings(), rowAnyNAs() instead rowAnyMissings().","code":""},{"path":"/reference/anyMissing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if there are any missing values in an object or not — anyMissing","text":"","code":"anyMissing(x, idxs = NULL, ...)  colAnyMissings(x, rows = NULL, cols = NULL, ..., useNames = TRUE)  rowAnyMissings(x, rows = NULL, cols = NULL, ..., useNames = TRUE)  colAnyNAs(x, rows = NULL, cols = NULL, ..., useNames = TRUE)  rowAnyNAs(x, rows = NULL, cols = NULL, ..., useNames = TRUE)"},{"path":"/reference/anyMissing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if there are any missing values in an object or not — anyMissing","text":"x vector, list, matrix, data.frame, NULL. idxs vector indicating subset elements operate . NULL, subsetting done. ... used. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/anyMissing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if there are any missing values in an object or not — anyMissing","text":"Returns TRUE missing value detected, otherwise FALSE.","code":""},{"path":"/reference/anyMissing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if there are any missing values in an object or not — anyMissing","text":"implementation method optimized speed memory. method return TRUE soon missing value detected.","code":""},{"path":[]},{"path":"/reference/anyMissing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Checks if there are any missing values in an object or not — anyMissing","text":"Henrik Bengtsson","code":""},{"path":"/reference/anyMissing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if there are any missing values in an object or not — anyMissing","text":"","code":"x <- rnorm(n = 1000)  x[seq(300, length(x), by = 100)] <- NA  stopifnot(anyMissing(x) == any(is.na(x)))"},{"path":"/reference/binCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast element counting in non-overlapping bins — binCounts","title":"Fast element counting in non-overlapping bins — binCounts","text":"Counts number elements non-overlapping bins","code":""},{"path":"/reference/binCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast element counting in non-overlapping bins — binCounts","text":"","code":"binCounts(x, idxs = NULL, bx, right = FALSE, ...)"},{"path":"/reference/binCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast element counting in non-overlapping bins — binCounts","text":"x numeric vector K positions binned counted. idxs vector indicating subset elements operate . NULL, subsetting done. bx numeric vector B + 1 ordered positions specifying B > 0 bins [bx[1], bx[2]), [bx[2], bx[3]), ..., [bx[B], bx[B + 1]). right TRUE, bins right-closed (left open), otherwise left-closed (right open). ... used.","code":""},{"path":"/reference/binCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast element counting in non-overlapping bins — binCounts","text":"Returns integer  vector length B non-negative integers.","code":""},{"path":"/reference/binCounts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast element counting in non-overlapping bins — binCounts","text":"binCounts(x, bx, right = TRUE) gives equivalent results rev(binCounts(-x, bx = rev(-bx), right = FALSE)), faster memory efficient.","code":""},{"path":"/reference/binCounts.html","id":"missing-and-non-finite-values","dir":"Reference","previous_headings":"","what":"Missing and non-finite values","title":"Fast element counting in non-overlapping bins — binCounts","text":"Missing values x ignored/dropped.  Missing values bx allowed gives error.","code":""},{"path":[]},{"path":"/reference/binCounts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast element counting in non-overlapping bins — binCounts","text":"Henrik Bengtsson","code":""},{"path":"/reference/binMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast mean calculations in non-overlapping bins — binMeans","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"Computes sample means non-overlapping bins","code":""},{"path":"/reference/binMeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"","code":"binMeans(y, x, idxs = NULL, bx, na.rm = TRUE, count = TRUE,   right = FALSE, ...)"},{"path":"/reference/binMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"y numeric logical vector K values calculate means . x numeric vector K positions binned. idxs vector indicating subset elements operate . NULL, subsetting done. bx numeric vector B + 1 ordered positions specifying B > 0 bins [bx[1], bx[2]), [bx[2], bx[3]), ..., [bx[B], bx[B + 1]). na.rm TRUE, missing values y dropped calculating mean, otherwise . count TRUE, number data points bins returned attribute count, integer vector length B. right TRUE, bins right-closed (left open), otherwise left-closed (right open). ... used.","code":""},{"path":"/reference/binMeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"Returns numeric  vector length B.","code":""},{"path":"/reference/binMeans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"binMeans(x, bx, right = TRUE) gives equivalent results rev(binMeans(-x, bx = sort(-bx), right = FALSE)), faster.","code":""},{"path":"/reference/binMeans.html","id":"missing-and-non-finite-values","dir":"Reference","previous_headings":"","what":"Missing and non-finite values","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"Data points either y x missing dropped (therefore also counted).   Non-finite values y allowed gives error.  Missing values bx allowed gives error.","code":""},{"path":"/reference/binMeans.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"[1] R-devel thread Fastest non-overlapping binning mean function ? Oct 3, 2012","code":""},{"path":[]},{"path":"/reference/binMeans.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"Henrik Bengtsson initial code contributions Martin Morgan [1].","code":""},{"path":"/reference/binMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast mean calculations in non-overlapping bins — binMeans","text":"","code":"x <- 1:200 mu <- double(length(x)) mu[1:50] <- 5 mu[101:150] <- -5 y <- mu + rnorm(length(x))  # Binning bx <- c(0, 50, 100, 150, 200) + 0.5 y_s <- binMeans(y, x = x, bx = bx)  plot(x, y) for (kk in seq_along(y_s)) {   lines(bx[c(kk, kk + 1)], y_s[c(kk, kk)], col = \"blue\", lwd = 2) }"},{"path":"/reference/diff2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast lagged differences — diff2","title":"Fast lagged differences — diff2","text":"Computes lagged iterated differences.","code":""},{"path":"/reference/diff2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast lagged differences — diff2","text":"","code":"diff2(x, idxs = NULL, lag = 1L, differences = 1L, ..., useNames = TRUE)"},{"path":"/reference/diff2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast lagged differences — diff2","text":"x numeric vector length N. idxs vector indicating subset elements operate . NULL, subsetting done. lag integer specifying lag. differences integer specifying order difference. ... used. useNames NA, default behavior  function naming support remained. FALSE,  naming support done. Else TRUE, names  attributes result set.","code":""},{"path":"/reference/diff2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast lagged differences — diff2","text":"Returns numeric  vector length N - differences.","code":""},{"path":[]},{"path":"/reference/diff2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast lagged differences — diff2","text":"Henrik Bengtsson","code":""},{"path":"/reference/diff2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast lagged differences — diff2","text":"","code":"diff2(1:10) #> [1] 1 1 1 1 1 1 1 1 1"},{"path":"/reference/indexByRow.html","id":null,"dir":"Reference","previous_headings":"","what":"Translates matrix indices by rows into indices by columns — indexByRow","title":"Translates matrix indices by rows into indices by columns — indexByRow","text":"Translates matrix indices rows indices columns.","code":""},{"path":"/reference/indexByRow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translates matrix indices by rows into indices by columns — indexByRow","text":"","code":"indexByRow(dim, idxs = NULL, ...)"},{"path":"/reference/indexByRow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translates matrix indices by rows into indices by columns — indexByRow","text":"dim numeric vector length two specifying length \"template\" matrix. idxs vector indicating subset elements operate . NULL, subsetting done. ... used.","code":""},{"path":"/reference/indexByRow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translates matrix indices by rows into indices by columns — indexByRow","text":"Returns integer  vector indices.","code":""},{"path":"/reference/indexByRow.html","id":"known-limitations","dir":"Reference","previous_headings":"","what":"Known limitations","title":"Translates matrix indices by rows into indices by columns — indexByRow","text":"current implementation support long-vector indices, input output indices type integers. means indices argument idxs can range [1,2^31-1]. Using greater value coerced NA_integer_.  Moreover, returned indices can range [1,2^31-1].","code":""},{"path":"/reference/indexByRow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Translates matrix indices by rows into indices by columns — indexByRow","text":"Henrik Bengtsson","code":""},{"path":"/reference/indexByRow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translates matrix indices by rows into indices by columns — indexByRow","text":"","code":"dim <- c(5, 4) X <- matrix(NA_integer_, nrow = dim[1], ncol = dim[2]) Y <- t(X) idxs <- seq_along(X)  # Assign by columns X[idxs] <- idxs print(X) #>      [,1] [,2] [,3] [,4] #> [1,]    1    6   11   16 #> [2,]    2    7   12   17 #> [3,]    3    8   13   18 #> [4,]    4    9   14   19 #> [5,]    5   10   15   20  # Assign by rows Y[indexByRow(dim(Y), idxs)] <- idxs print(Y) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]    6    7    8    9   10 #> [3,]   11   12   13   14   15 #> [4,]   16   17   18   19   20  stopifnot(X == t(Y))"},{"path":"/reference/logSumExp.html","id":null,"dir":"Reference","previous_headings":"","what":"Accurately computes the logarithm of the sum of exponentials — logSumExp","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"Accurately computes logarithm sum exponentials, , \\(log(sum(exp(lx)))\\).  \\(lx = log(x)\\), equivalently calculating \\(log(sum(x))\\).","code":""},{"path":"/reference/logSumExp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"","code":"logSumExp(lx, idxs = NULL, na.rm = FALSE, ...)"},{"path":"/reference/logSumExp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"lx numeric vector. Typically lx \\(log(x)\\) values. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. ... used.","code":""},{"path":"/reference/logSumExp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"Returns numeric scalar.","code":""},{"path":"/reference/logSumExp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"function, avoid numerical underflow, often used computing logarithm sum small numbers (\\(|x| << 1\\)) probabilities. function accurate log(sum(exp(lx))) values \\(x = exp(lx)\\) \\(|x| << 1\\).  implementation function based observation $$ log(+ b) = [ la = log(), lb = log(b) ] = log( exp(la) + exp(lb) ) = la + log ( 1 + exp(lb - la) ) $$ Assuming \\(la > lb\\), \\(|lb - la| < |lb|\\), less likely computation \\(1 + exp(lb - la)\\) underflow/overflow numerically.  , overall result function accurate.  Analogously , implementation function finds maximum value lx subtracts remaining values lx.","code":""},{"path":"/reference/logSumExp.html","id":"benchmarking","dir":"Reference","previous_headings":"","what":"Benchmarking","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"method optimized correctness, avoiding underflowing.  implemented native code optimized speed memory.","code":""},{"path":"/reference/logSumExp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"[1] R Core Team, Writing R Extensions, v3.0.0, April 2013.  [2] Laurent El Ghaoui, Hyper-Textbook: Optimization Models Applications, University California Berkeley, August 2012. (Chapter 'Log-Sum-Exp (LSE) Function Properties')  [3] R-help thread logsumexp function R, 2011-02-17. https://stat.ethz.ch/pipermail/r-help/2011-February/269205.html","code":""},{"path":[]},{"path":"/reference/logSumExp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"Henrik Bengtsson","code":""},{"path":"/reference/logSumExp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accurately computes the logarithm of the sum of exponentials — logSumExp","text":"","code":"## EXAMPLE #1 lx <- c(1000.01, 1000.02) y0 <- log(sum(exp(lx))) print(y0) ## Inf #> [1] Inf  y1 <- logSumExp(lx) print(y1) ## 1000.708 #> [1] 1000.708   ## EXAMPLE #2 lx <- c(-1000.01, -1000.02) y0 <- log(sum(exp(lx))) print(y0) ## -Inf #> [1] -Inf  y1 <- logSumExp(lx) print(y1) ## -999.3218 #> [1] -999.3218   ## EXAMPLE #3 ## R-help thread 'Beyond double-precision?' on May 9, 2009.  set.seed(1) x <- runif(50)  ## The logarithm of the harmonic mean y0 <- log(1 / mean(1 / x)) print(y0)  ## -1.600885 #> [1] -1.600885  lx <- log(x) y1 <- log(length(x)) - logSumExp(-lx) print(y1)  ## [1] -1.600885 #> [1] -1.600885  # Sanity check stopifnot(all.equal(y1, y0))"},{"path":"/reference/matrixStats-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Package matrixStats — matrixStats-package","title":"Package matrixStats — matrixStats-package","text":"High-performing functions operating rows columns matrices, e.g. col / rowMedians(), col / rowRanks(), col / rowSds().  Functions optimized per data type subsetted calculations memory usage processing time minimized.  also optimized vector-based methods, e.g. binMeans(), madDiff() weightedMedian().","code":""},{"path":"/reference/matrixStats-package.html","id":"how-to-cite-this-package","dir":"Reference","previous_headings":"","what":"How to cite this package","title":"Package matrixStats — matrixStats-package","text":"Henrik Bengtsson (2017). matrixStats: Functions Apply Rows Columns Matrices (Vectors). R package version 0.52.2. https://github.com/HenrikBengtsson/matrixStats","code":""},{"path":"/reference/matrixStats-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Package matrixStats — matrixStats-package","text":"Henrik Bengtsson, Hector Corrada Bravo, Robert Gentleman, Ola Hossjer, Harris Jaffee, Dongcan Jiang, Peter Langfelder","code":""},{"path":"/reference/mean2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast averaging over subset of vector elements — mean2","title":"Fast averaging over subset of vector elements — mean2","text":"Computes sample mean subset values.","code":""},{"path":"/reference/mean2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast averaging over subset of vector elements — mean2","text":"","code":"mean2(x, idxs = NULL, na.rm = FALSE, refine = TRUE, ...)"},{"path":"/reference/mean2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast averaging over subset of vector elements — mean2","text":"x NxK matrix , dim. specified, N * K vector. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. refine TRUE x numeric, extra effort used calculate average greater numerical precision, otherwise . ... used.","code":""},{"path":"/reference/mean2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast averaging over subset of vector elements — mean2","text":"Returns numeric scalar.","code":""},{"path":"/reference/mean2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast averaging over subset of vector elements — mean2","text":"mean2(x, idxs) gives equivalent results mean(x[idxs]), faster memory efficient since avoids actual subsetting requires copying elements garbage collection thereof. x numeric refine = TRUE, two-pass scan used calculate average.  first scan calculates total sum divides number (non-missing) values.  second scan, average refined adding residuals towards first average.  mean() uses approach. mean2(..., refine = FALSE) almost twice fast mean2(..., refine = TRUE).","code":""},{"path":[]},{"path":"/reference/mean2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast averaging over subset of vector elements — mean2","text":"Henrik Bengtsson","code":""},{"path":"/reference/mean2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast averaging over subset of vector elements — mean2","text":"","code":"x <- 1:10 n <- length(x)  idxs <- seq(from = 1, to = n, by = 2) s1 <- mean(x[idxs])                     # 25 s2 <- mean2(x, idxs = idxs)             # 25 stopifnot(identical(s1, s2))  idxs <- seq(from = n, to = 1, by = -2) s1 <- mean(x[idxs])                     # 25 s2 <- mean2(x, idxs = idxs)             # 25 stopifnot(identical(s1, s2))  s1 <- mean(x)                           # 55 s2 <- mean2(x)                          # 55 stopifnot(identical(s1, s2))"},{"path":"/reference/rowAlls.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"Checks value exists / exist row (column) matrix.","code":""},{"path":"/reference/rowAlls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"","code":"rowAlls(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,   dim. = dim(x), ..., useNames = TRUE)  colAlls(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,   dim. = dim(x), ..., useNames = TRUE)  allValue(x, idxs = NULL, value = TRUE, na.rm = FALSE, ...)  rowAnys(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,   dim. = dim(x), ..., useNames = TRUE)  colAnys(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,   dim. = dim(x), ..., useNames = TRUE)  anyValue(x, idxs = NULL, value = TRUE, na.rm = FALSE, ...)"},{"path":"/reference/rowAlls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. value value search . na.rm TRUE, missing values excluded. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise . idxs vector indicating subset elements operate . NULL, subsetting done.","code":""},{"path":"/reference/rowAlls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"rowAlls() (colAlls()) returns logical  vector length N (K). Analogously rowAnys() (rowAlls()).","code":""},{"path":"/reference/rowAlls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"functions takes either matrix vector input. vector, argument dim. must specified fulfill prod(dim.) == length(x).  result identical results obtained passing matrix(x, nrow = dim.[1L], ncol = dim.[2L]), avoids temporarily create/allocate matrix, needed calculations.","code":""},{"path":"/reference/rowAlls.html","id":"logical-value","dir":"Reference","previous_headings":"","what":"Logical value","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"value logical, result function applied .logical(x).  specifically, x numeric, zeros treated FALSE, non-zero values TRUE, missing values NA.","code":""},{"path":[]},{"path":"/reference/rowAlls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowAlls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a value exists / does not exist in each row (column) of a matrix — rowAlls","text":"","code":"x <- matrix(FALSE, nrow = 10, ncol = 5) x[3:7, c(2, 4)] <- TRUE x[2:4, ] <- TRUE x[, 1] <- TRUE x[5, ] <- FALSE x[, 5] <- FALSE print(x) #>        [,1]  [,2]  [,3]  [,4]  [,5] #>  [1,]  TRUE FALSE FALSE FALSE FALSE #>  [2,]  TRUE  TRUE  TRUE  TRUE FALSE #>  [3,]  TRUE  TRUE  TRUE  TRUE FALSE #>  [4,]  TRUE  TRUE  TRUE  TRUE FALSE #>  [5,] FALSE FALSE FALSE FALSE FALSE #>  [6,]  TRUE  TRUE FALSE  TRUE FALSE #>  [7,]  TRUE  TRUE FALSE  TRUE FALSE #>  [8,]  TRUE FALSE FALSE FALSE FALSE #>  [9,]  TRUE FALSE FALSE FALSE FALSE #> [10,]  TRUE FALSE FALSE FALSE FALSE  print(rowCounts(x))       # 1 4 4 4 0 3 3 1 1 1 #>  [1] 1 4 4 4 0 3 3 1 1 1 print(colCounts(x))       # 9 5 3 5 0 #> [1] 9 5 3 5 0  print(rowAnys(x)) #>  [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE print(which(rowAnys(x)))  # 1  2  3  4  6  7  8  9 10 #> [1]  1  2  3  4  6  7  8  9 10 print(colAnys(x)) #> [1]  TRUE  TRUE  TRUE  TRUE FALSE print(which(colAnys(x)))  # 1 2 3 4 #> [1] 1 2 3 4"},{"path":"/reference/rowAvgsPerColSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","title":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","text":"Applies row--row (column--column) averaging function equally-sized subsets matrix columns (rows).  subset averaged independently others.","code":""},{"path":"/reference/rowAvgsPerColSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","text":"","code":"rowAvgsPerColSet(X, W = NULL, rows = NULL, S, FUN = rowMeans, ...,   na.rm = NA, tFUN = FALSE)  colAvgsPerRowSet(X, W = NULL, cols = NULL, S, FUN = colMeans, ...,   na.rm = NA, tFUN = FALSE)"},{"path":"/reference/rowAvgsPerColSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","text":"X numeric NxM matrix. W optional numeric NxM matrix weights. rows vector indicating subset rows operate . NULL, subsetting done. S integer KxJ matrix specifying J subsets.  column holds K column (row) indices corresponding subset. FUN row--row (column--column) function used average subset X.  function must accept numeric NxK (KxM) matrix logical argument na.rm, return numeric vector length N (M). ... Additional arguments passed FUN function. na.rm (logical) Argument passed FUN() na.rm = na.rm.  NA (default), na.rm = TRUE used X S holds missing values, otherwise na.rm = FALSE. tFUN TRUE, NxK (KxM) matrix passed FUN() transposed first. cols vector indicating subset columns operate . NULL, subsetting done.","code":""},{"path":"/reference/rowAvgsPerColSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","text":"Returns numeric JxN (MxJ) matrix, row names equal rownames(X) (colnames(S)) column names colnames(S) (colnames(X)).","code":""},{"path":"/reference/rowAvgsPerColSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","text":"argument S single column vector indices 1:N, rowAvgsPerColSet(X, S = S, FUN = rowMeans) gives result rowMeans(X).  Analogously, colAvgsPerRowSet().","code":""},{"path":"/reference/rowAvgsPerColSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowAvgsPerColSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies a row-by-row (column-by-column) averaging function to equally-sized\nsubsets of matrix columns (rows) — rowAvgsPerColSet","text":"","code":"X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6) rownames(X) <- LETTERS[1:nrow(X)] colnames(X) <- letters[1:ncol(X)] print(X) #>             a           b            c           d          e           f #> A -0.05612874 -0.70749516  0.188792300  0.33295037  1.7672873  0.71266631 #> B -0.15579551  0.36458196 -1.804958629  1.06309984  0.7167075 -0.07356440 #> C -1.47075238  0.76853292  1.465554862 -0.30418392  0.9101742 -0.03763417 #> D -0.47815006 -0.11234621  0.153253338  0.37001881  0.3841854 -0.68166048 #> E  0.41794156  0.88110773  2.172611670  0.26709879  1.6821761 -0.32427027 #> F  1.35867955  0.39810588  0.475509529 -0.54252003 -0.6357365  0.06016044 #> G -0.10278773 -0.61202639 -0.709946431  1.20786781 -0.4616447 -0.58889449 #> H  0.38767161  0.34111969  0.610726353  1.16040262  1.4322822  0.53149619 #> I -0.05380504 -1.12936310 -0.934097632  0.70021365 -0.6506964 -1.51839408 #> J -1.37705956  1.43302370 -1.253633400  1.58683345 -0.2073807  0.30655786 #> K -0.41499456  1.98039990  0.291446236  0.55848643 -0.3928079 -1.53644982 #> L -0.39428995 -0.36722148 -0.443291873 -1.27659221 -0.3199929 -0.30097613 #> M -0.05931340 -1.04413463  0.001105352 -0.57326541 -0.2791133 -0.52827990 #> N  1.10002537  0.56971963  0.074341324 -1.22461261  0.4941883 -0.65209478 #> O  0.76317575 -0.13505460 -0.589520946 -0.47340064 -0.1773305 -0.05689678 #> P -0.16452360  2.40161776 -0.568668733 -0.62036668 -0.5059575 -1.91435943 #> Q -0.25336168 -0.03924000 -0.135178615  0.04211587  1.3430388  1.17658331 #> R  0.69696338  0.68973936  1.178086997 -0.91092165 -0.2145794 -1.66497244 #> S  0.55666320  0.02800216 -1.523566800  0.15802877 -0.1795565 -0.46353040 #> T -0.68875569 -0.74327321  0.593946188 -0.65458464 -0.1001907 -1.11592011   # - - - - - - - - - - - - - - - - - - - - - - - - - - # Apply rowMeans() for 3 sets of 2 columns # - - - - - - - - - - - - - - - - - - - - - - - - - - nbr_of_sets <- 3 S <- matrix(1:ncol(X), ncol = nbr_of_sets) colnames(S) <- sprintf(\"s%d\", 1:nbr_of_sets) print(S) #>      s1 s2 s3 #> [1,]  1  3  5 #> [2,]  2  4  6  Z <- rowAvgsPerColSet(X, S = S) print(Z) #>            s1          s2          s3 #> A -0.38181195  0.26087134  1.23997679 #> B  0.10439323 -0.37092940  0.32157154 #> C -0.35110973  0.58068547  0.43627003 #> D -0.29524813  0.26163607 -0.14873756 #> E  0.64952464  1.21985523  0.67895290 #> F  0.87839272 -0.03350525 -0.28778801 #> G -0.35740706  0.24896069 -0.52526961 #> H  0.36439565  0.88556448  0.98188922 #> I -0.59158407 -0.11694199 -1.08454522 #> J  0.02798207  0.16660003  0.04958856 #> K  0.78270267  0.42496633 -0.96462888 #> L -0.38075572 -0.85994204 -0.31048450 #> M -0.55172401 -0.28608003 -0.40369660 #> N  0.83487250 -0.57513565 -0.07895322 #> O  0.31406057 -0.53146079 -0.11711363 #> P  1.11854708 -0.59451771 -1.21015844 #> Q -0.14630084 -0.04653137  1.25981107 #> R  0.69335137  0.13358267 -0.93977592 #> S  0.29233268 -0.68276901 -0.32154347 #> T -0.71601445 -0.03031923 -0.60805542  # Validation Z0 <- cbind(s1 = rowMeans(X[, 1:2]),             s2 = rowMeans(X[, 3:4]),             s3 = rowMeans(X[, 5:6])) stopifnot(identical(drop(Z), Z0))   # - - - - - - - - - - - - - - - - - - - - - - - - - - # Apply colMeans() for 5 sets of 4 rows # - - - - - - - - - - - - - - - - - - - - - - - - - - nbr_of_sets <- 5 S <- matrix(1:nrow(X), ncol = nbr_of_sets) colnames(S) <- sprintf(\"s%d\", 1:nbr_of_sets) print(S) #>      s1 s2 s3 s4 s5 #> [1,]  1  5  9 13 17 #> [2,]  2  6 10 14 18 #> [3,]  3  7 11 15 19 #> [4,]  4  8 12 16 20  Z <- colAvgsPerRowSet(X, S = S) print(Z) #>             a           b             c          d          e           f #> s1 -0.5402067  0.07831838  0.0006604676  0.3654713  0.9445886 -0.02004819 #> s2  0.5153762  0.25207673  0.6372252805  0.5232123  0.5042693 -0.08037703 #> s3 -0.5600373  0.47920976 -0.5848941674  0.3922353 -0.3927195 -0.76231554 #> s4  0.4098410  0.44803704 -0.2706857508 -0.7229113 -0.1170532 -0.78790772 #> s5  0.0778773 -0.01619292  0.0283219422 -0.3413404  0.2121780 -0.51695991  # Validation Z0 <- rbind(s1 = colMeans(X[  1:4, ]),             s2 = colMeans(X[  5:8, ]),             s3 = colMeans(X[ 9:12, ]),             s4 = colMeans(X[13:16, ]),             s5 = colMeans(X[17:20, ])) stopifnot(identical(drop(Z), Z0))   # - - - - - - - - - - - - - - - - - - - - - - - - - - # When there is only one \"complete\" set # - - - - - - - - - - - - - - - - - - - - - - - - - - nbr_of_sets <- 1 S <- matrix(1:ncol(X), ncol = nbr_of_sets) colnames(S) <- sprintf(\"s%d\", 1:nbr_of_sets) print(S) #>      s1 #> [1,]  1 #> [2,]  2 #> [3,]  3 #> [4,]  4 #> [5,]  5 #> [6,]  6  Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans) print(Z) #>            s1 #> A  0.37301206 #> B  0.01834512 #> C  0.22194859 #> D -0.06078321 #> E  0.84944426 #> F  0.18569982 #> G -0.21123866 #> H  0.74394978 #> I -0.59769043 #> J  0.08139022 #> K  0.08101337 #> L -0.51706075 #> M -0.41383355 #> N  0.06026121 #> O -0.11150462 #> P -0.22870969 #> Q  0.35565962 #> R -0.03761396 #> S -0.23732660 #> T -0.45146303  Z0 <- rowMeans(X) stopifnot(identical(drop(Z), Z0))   nbr_of_sets <- 1 S <- matrix(1:nrow(X), ncol = nbr_of_sets) colnames(S) <- sprintf(\"s%d\", 1:nbr_of_sets) print(S) #>       s1 #>  [1,]  1 #>  [2,]  2 #>  [3,]  3 #>  [4,]  4 #>  [5,]  5 #>  [6,]  6 #>  [7,]  7 #>  [8,]  8 #>  [9,]  9 #> [10,] 10 #> [11,] 11 #> [12,] 12 #> [13,] 13 #> [14,] 14 #> [15,] 15 #> [16,] 16 #> [17,] 17 #> [18,] 18 #> [19,] 19 #> [20,] 20  Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans) print(Z) #>              a         b           c          d         e          f #> s1 -0.01942987 0.2482898 -0.03787445 0.04333343 0.2302526 -0.4335217  Z0 <- colMeans(X) stopifnot(identical(drop(Z), Z0))"},{"path":"/reference/rowCollapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts one cell per row (column) from a matrix — rowCollapse","title":"Extracts one cell per row (column) from a matrix — rowCollapse","text":"Extracts one cell per row (column) matrix.  implementation optimized memory speed.","code":""},{"path":"/reference/rowCollapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts one cell per row (column) from a matrix — rowCollapse","text":"","code":"rowCollapse(x, idxs, rows = NULL, dim. = dim(x), ..., useNames = TRUE)  colCollapse(x, idxs, cols = NULL, dim. = dim(x), ..., useNames = TRUE)"},{"path":"/reference/rowCollapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts one cell per row (column) from a matrix — rowCollapse","text":"x NxK matrix , dim. specified, N * K vector. idxs index vector (maximum) length N (K) specifying columns (rows) extracted. rows vector indicating subset rows operate . NULL, subsetting done. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise . cols vector indicating subset columns operate . NULL, subsetting done.","code":""},{"path":"/reference/rowCollapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts one cell per row (column) from a matrix — rowCollapse","text":"Returns vector length N (K).","code":""},{"path":[]},{"path":"/reference/rowCollapse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracts one cell per row (column) from a matrix — rowCollapse","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowCollapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts one cell per row (column) from a matrix — rowCollapse","text":"","code":"x <- matrix(1:27, ncol = 3)  y <- rowCollapse(x, 1) stopifnot(identical(y, x[, 1]))  y <- rowCollapse(x, 2) stopifnot(identical(y, x[, 2]))  y <- rowCollapse(x, c(1, 1, 1, 1, 1, 3, 3, 3, 3)) stopifnot(identical(y, c(x[1:5, 1], x[6:9, 3])))  y <- rowCollapse(x, 1:3) print(y) #> [1]  1 11 21  4 14 24  7 17 27 y_truth <- c(x[1, 1], x[2, 2], x[3, 3], x[4, 1], x[5, 2],              x[6, 3], x[7, 1], x[8, 2], x[9, 3]) stopifnot(identical(y, y_truth))"},{"path":"/reference/rowCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the number of occurrences of a specific value — rowCounts","title":"Counts the number of occurrences of a specific value — rowCounts","text":"row- column-wise functions take either matrix vector input. vector, argument dim. must specified fulfill prod(dim.) == length(x).  result identical results obtained passing matrix(x, nrow = dim.[1L], ncol = dim.[2L]), avoids temporarily create/allocate matrix, needed calculations.","code":""},{"path":"/reference/rowCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the number of occurrences of a specific value — rowCounts","text":"","code":"rowCounts(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,   dim. = dim(x), ..., useNames = TRUE)  colCounts(x, rows = NULL, cols = NULL, value = TRUE, na.rm = FALSE,   dim. = dim(x), ..., useNames = TRUE)  count(x, idxs = NULL, value = TRUE, na.rm = FALSE, ...)"},{"path":"/reference/rowCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the number of occurrences of a specific value — rowCounts","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. value value search . na.rm TRUE, missing values excluded. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise . idxs vector indicating subset elements operate . NULL, subsetting done.","code":""},{"path":"/reference/rowCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the number of occurrences of a specific value — rowCounts","text":"rowCounts() (colCounts()) returns integer  vector length N (K). count() returns scalar type integer count less 2^31-1 (= .Machine$integer.max) otherwise scalar type double.","code":""},{"path":[]},{"path":"/reference/rowCounts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Counts the number of occurrences of a specific value — rowCounts","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the number of occurrences of a specific value — rowCounts","text":"","code":"x <- matrix(0:11, nrow = 4, ncol = 3) x[2:3, 2:3] <- 2:5 x[3, 3] <- NA_integer_ print(x) #>      [,1] [,2] [,3] #> [1,]    0    4    8 #> [2,]    1    2    4 #> [3,]    2    3   NA #> [4,]    3    7   11  print(rowCounts(x, value = 2)) #> [1]  0  1 NA  0 ## [1]  0  1 NA  0 print(colCounts(x, value = 2)) #> [1]  1  1 NA ## [1]  1  1 NA print(colCounts(x, value = NA_integer_)) #> [1] 0 0 1 ## [1] 0 0 1  print(rowCounts(x, value = 2, na.rm = TRUE)) #> [1] 0 1 1 0 ## [1] 0 1 1 0 print(colCounts(x, value = 2, na.rm = TRUE)) #> [1] 1 1 0 ## [1] 1 1 0  print(rowAnys(x, value = 2)) #> [1] FALSE  TRUE  TRUE FALSE ## [1] FALSE  TRUE  TRUE FALSE print(rowAnys(x, value = NA_integer_)) #> [1] FALSE FALSE  TRUE FALSE ## [1] FALSE FALSE  TRUE FALSE  print(colAnys(x, value = 2)) #> [1] TRUE TRUE   NA ## [1] TRUE TRUE   NA print(colAnys(x, value = 2, na.rm = TRUE)) #> [1]  TRUE  TRUE FALSE ## [1]  TRUE  TRUE FALSE  print(colAlls(x, value = 2)) #> [1] FALSE FALSE FALSE ## [1] FALSE FALSE FALSE"},{"path":"/reference/rowCumsums.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix — rowCumsums","title":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix — rowCumsums","text":"Cumulative sums, products, minima maxima row (column) matrix.","code":""},{"path":"/reference/rowCumsums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix — rowCumsums","text":"","code":"rowCumsums(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)  colCumsums(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)  rowCumprods(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)  colCumprods(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)  rowCummins(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)  colCummins(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)  rowCummaxs(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)  colCummaxs(x, rows = NULL, cols = NULL, dim. = dim(x), ...,   useNames = TRUE)"},{"path":"/reference/rowCumsums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix — rowCumsums","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowCumsums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix — rowCumsums","text":"Returns numeric NxK matrix mode x, except x mode logical, return type integer.","code":""},{"path":[]},{"path":"/reference/rowCumsums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix — rowCumsums","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowCumsums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative sums, products, minima and maxima for each row (column) in a\nmatrix — rowCumsums","text":"","code":"x <- matrix(1:12, nrow = 4, ncol = 3) print(x) #>      [,1] [,2] [,3] #> [1,]    1    5    9 #> [2,]    2    6   10 #> [3,]    3    7   11 #> [4,]    4    8   12  yr <- rowCumsums(x) print(yr) #>      [,1] [,2] [,3] #> [1,]    1    6   15 #> [2,]    2    8   18 #> [3,]    3   10   21 #> [4,]    4   12   24  yc <- colCumsums(x) print(yc) #>      [,1] [,2] [,3] #> [1,]    1    5    9 #> [2,]    3   11   19 #> [3,]    6   18   30 #> [4,]   10   26   42  yr <- rowCumprods(x) print(yr) #>      [,1] [,2] [,3] #> [1,]    1    5   45 #> [2,]    2   12  120 #> [3,]    3   21  231 #> [4,]    4   32  384  yc <- colCumprods(x) print(yc) #>      [,1] [,2]  [,3] #> [1,]    1    5     9 #> [2,]    2   30    90 #> [3,]    6  210   990 #> [4,]   24 1680 11880  yr <- rowCummaxs(x) print(yr) #>      [,1] [,2] [,3] #> [1,]    1    5    9 #> [2,]    2    6   10 #> [3,]    3    7   11 #> [4,]    4    8   12  yc <- colCummaxs(x) print(yc) #>      [,1] [,2] [,3] #> [1,]    1    5    9 #> [2,]    2    6   10 #> [3,]    3    7   11 #> [4,]    4    8   12  yr <- rowCummins(x) print(yr) #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    2    2    2 #> [3,]    3    3    3 #> [4,]    4    4    4  yc <- colCummins(x) print(yc) #>      [,1] [,2] [,3] #> [1,]    1    5    9 #> [2,]    1    5    9 #> [3,]    1    5    9 #> [4,]    1    5    9"},{"path":"/reference/rowDiffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates difference for each row (column) in a matrix — rowDiffs","title":"Calculates difference for each row (column) in a matrix — rowDiffs","text":"Calculates difference row (column) matrix.","code":""},{"path":"/reference/rowDiffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates difference for each row (column) in a matrix — rowDiffs","text":"","code":"rowDiffs(x, rows = NULL, cols = NULL, lag = 1L, differences = 1L,   dim. = dim(x), ..., useNames = TRUE)  colDiffs(x, rows = NULL, cols = NULL, lag = 1L, differences = 1L,   dim. = dim(x), ..., useNames = TRUE)"},{"path":"/reference/rowDiffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates difference for each row (column) in a matrix — rowDiffs","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. lag integer specifying lag. differences integer specifying order difference. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowDiffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates difference for each row (column) in a matrix — rowDiffs","text":"Returns numeric Nx(K-1) (N-1)xK matrix.","code":""},{"path":[]},{"path":"/reference/rowDiffs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates difference for each row (column) in a matrix — rowDiffs","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowDiffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates difference for each row (column) in a matrix — rowDiffs","text":"","code":"x <- matrix(1:27, ncol = 3)  d1 <- rowDiffs(x) print(d1) #>       [,1] [,2] #>  [1,]    9    9 #>  [2,]    9    9 #>  [3,]    9    9 #>  [4,]    9    9 #>  [5,]    9    9 #>  [6,]    9    9 #>  [7,]    9    9 #>  [8,]    9    9 #>  [9,]    9    9  d2 <- t(colDiffs(t(x))) stopifnot(all.equal(d2, d1))"},{"path":"/reference/rowIQRs.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","title":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","text":"Estimates interquartile range row (column) matrix.","code":""},{"path":"/reference/rowIQRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","text":"","code":"rowIQRs(x, rows = NULL, cols = NULL, na.rm = FALSE, ...,   useNames = TRUE)  colIQRs(x, rows = NULL, cols = NULL, na.rm = FALSE, ...,   useNames = TRUE)  iqr(x, idxs = NULL, na.rm = FALSE, ...)"},{"path":"/reference/rowIQRs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. na.rm TRUE, missing values excluded. ... Additional arguments passed rowQuantiles() (colQuantiles()). useNames TRUE (default), names attributes result set, otherwise . idxs vector indicating subset elements operate . NULL, subsetting done.","code":""},{"path":"/reference/rowIQRs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowIQRs.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","text":"Contrary IQR, gives error missing values na.rm = FALSE, iqr() corresponding row column-specific functions return NA_real_.","code":""},{"path":[]},{"path":"/reference/rowIQRs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowIQRs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates of the interquartile range for each row (column) in a matrix — rowIQRs","text":"","code":"set.seed(1)  x <- matrix(rnorm(50 * 40), nrow = 50, ncol = 40) str(x) #>  num [1:50, 1:40] -0.626 0.184 -0.836 1.595 0.33 ...  # Row IQRs q <- rowIQRs(x) print(q) #>  [1] 1.1731306 1.0107162 1.6654064 1.2539423 1.3705467 1.6404858 1.6995732 #>  [8] 1.3291742 1.6886054 1.2549506 0.9359126 1.0195589 1.4007595 1.2198987 #> [15] 1.0787055 1.4524548 1.2556678 1.6562935 0.9436753 1.5332922 1.0804972 #> [22] 1.3345150 1.3778290 1.2813150 1.1560162 1.2670159 1.6274822 1.0123151 #> [29] 1.3011232 0.9232206 1.3664274 1.6141894 1.3007675 1.3635105 1.1991735 #> [36] 1.1799147 1.5664136 1.1915430 1.3908429 1.2292913 1.3337325 1.1083987 #> [43] 1.1150356 1.3610511 1.9523920 1.1711522 1.8068631 1.4450980 1.7511271 #> [50] 1.1295912 q0 <- apply(x, MARGIN = 1, FUN = IQR) stopifnot(all.equal(q0, q))  # Column IQRs q <- colIQRs(x) print(q) #>  [1] 1.100049 1.178648 0.916382 1.523818 1.233231 1.177970 1.248359 1.281653 #>  [9] 1.305779 1.463096 1.121270 1.524690 1.262950 1.608730 1.937564 1.666534 #> [17] 1.370162 1.238580 1.341196 1.214581 1.610758 1.488645 1.361843 1.332965 #> [25] 1.244894 1.507090 1.172773 1.349565 1.511738 1.213386 1.241099 1.408363 #> [33] 1.050347 1.389932 1.806088 1.377805 1.241565 1.241594 1.234828 1.580717 q0 <- apply(x, MARGIN = 2, FUN = IQR) stopifnot(all.equal(q0, q))"},{"path":"/reference/rowLogSumExps.html","id":null,"dir":"Reference","previous_headings":"","what":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns — rowLogSumExps","title":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns — rowLogSumExps","text":"Accurately computes logarithm sum exponentials across rows columns.","code":""},{"path":"/reference/rowLogSumExps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns — rowLogSumExps","text":"","code":"rowLogSumExps(lx, rows = NULL, cols = NULL, na.rm = FALSE,   dim. = dim(lx), ..., useNames = TRUE)  colLogSumExps(lx, rows = NULL, cols = NULL, na.rm = FALSE,   dim. = dim(lx), ..., useNames = TRUE)"},{"path":"/reference/rowLogSumExps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns — rowLogSumExps","text":"lx numeric NxK matrix. Typically lx \\(log(x)\\) values. rows, cols vector indicating subset rows (/columns) operate . NULL, subsetting done. na.rm TRUE, missing values ignored, otherwise . dim. integer vector length two specifying dimension x, also matrix. ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowLogSumExps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns — rowLogSumExps","text":"numeric  vector length N (K).","code":""},{"path":"/reference/rowLogSumExps.html","id":"benchmarking","dir":"Reference","previous_headings":"","what":"Benchmarking","title":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns — rowLogSumExps","text":"methods implemented native code optimized speed memory.","code":""},{"path":[]},{"path":"/reference/rowLogSumExps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Accurately computes the logarithm of the sum of exponentials across rows or\ncolumns — rowLogSumExps","text":"Native implementation Henrik Bengtsson.  Original R code Nakayama ??? (Japan).","code":""},{"path":"/reference/rowMeans2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the mean for each row (column) in a matrix — rowMeans2","title":"Calculates the mean for each row (column) in a matrix — rowMeans2","text":"Calculates mean row (column) matrix.","code":""},{"path":"/reference/rowMeans2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the mean for each row (column) in a matrix — rowMeans2","text":"","code":"rowMeans2(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,   dim. = dim(x), ..., useNames = TRUE)  colMeans2(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,   dim. = dim(x), ..., useNames = TRUE)"},{"path":"/reference/rowMeans2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the mean for each row (column) in a matrix — rowMeans2","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. na.rm TRUE, missing values excluded. refine TRUE x numeric, extra effort used calculate average greater numerical precision, otherwise . dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowMeans2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the mean for each row (column) in a matrix — rowMeans2","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowMeans2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the mean for each row (column) in a matrix — rowMeans2","text":"implementation rowMeans2() colMeans2() optimized speed memory.","code":""},{"path":"/reference/rowMeans2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the mean for each row (column) in a matrix — rowMeans2","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowMedians.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the median for each row (column) in a matrix — rowMedians","title":"Calculates the median for each row (column) in a matrix — rowMedians","text":"Calculates median row (column) matrix.","code":""},{"path":"/reference/rowMedians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the median for each row (column) in a matrix — rowMedians","text":"","code":"rowMedians(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),   ..., useNames = TRUE)  colMedians(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),   ..., useNames = TRUE)"},{"path":"/reference/rowMedians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the median for each row (column) in a matrix — rowMedians","text":"x NxK matrix , dim. specified, N * K vector. rows, cols vector indicating subset rows (/columns) operate . NULL, subsetting done. na.rm TRUE, NAs excluded first, otherwise . dim. integer vector length two specifying dimension x, also matrix. ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowMedians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the median for each row (column) in a matrix — rowMedians","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowMedians.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the median for each row (column) in a matrix — rowMedians","text":"implementation rowMedians() colMedians() optimized speed memory.  avoid coercing doubles (hence memory allocation), special implementation integer matrices.  , x integer matrix, rowMedians(.double(x)) (rowMedians(.double(x))) require three times memory rowMedians(x) (colMedians(x)), avoided.","code":""},{"path":[]},{"path":"/reference/rowMedians.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the median for each row (column) in a matrix — rowMedians","text":"Henrik Bengtsson, Harris Jaffee","code":""},{"path":"/reference/rowOrderStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","title":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","text":"Gets order statistic row (column) matrix.","code":""},{"path":"/reference/rowOrderStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","text":"","code":"rowOrderStats(x, rows = NULL, cols = NULL, which, dim. = dim(x), ...,   useNames = TRUE)  colOrderStats(x, rows = NULL, cols = NULL, which, dim. = dim(x), ...,   useNames = TRUE)"},{"path":"/reference/rowOrderStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. integer index [1,K] ([1,N]) indicating order statistic returned. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowOrderStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowOrderStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","text":"implementation rowOrderStats() optimized speed memory.  avoid coercing doubles (hence memory allocation), unique implementation integer matrices.","code":""},{"path":"/reference/rowOrderStats.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","text":"method handle missing values, , result corresponds na.rm = FALSE (argument available).","code":""},{"path":[]},{"path":"/reference/rowOrderStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets an order statistic for each row (column) in a matrix — rowOrderStats","text":"native implementation rowOrderStats() adopted Henrik Bengtsson Robert Gentleman's rowQ() Biobase package.","code":""},{"path":"/reference/rowProds.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the product for each row (column) in a matrix — product","title":"Calculates the product for each row (column) in a matrix — product","text":"Calculates product row (column) matrix.","code":""},{"path":"/reference/rowProds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the product for each row (column) in a matrix — product","text":"","code":"product(x, idxs = NULL, na.rm = FALSE, ...)  rowProds(x, rows = NULL, cols = NULL, na.rm = FALSE,   method = c(\"direct\", \"expSumLog\"), ..., useNames = TRUE)  colProds(x, rows = NULL, cols = NULL, na.rm = FALSE,   method = c(\"direct\", \"expSumLog\"), ..., useNames = TRUE)"},{"path":"/reference/rowProds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the product for each row (column) in a matrix — product","text":"x NxK matrix , dim. specified, N * K vector. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. ... used. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. method character string specifying product calculated. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowProds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the product for each row (column) in a matrix — product","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowProds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the product for each row (column) in a matrix — product","text":"method = \"expSumLog\", product() function used, calculates product via logarithmic transform (treating negative values specially).  improves precision lowers risk numeric overflow.  method = \"direct\", direct product calculated via prod() function.","code":""},{"path":"/reference/rowProds.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Calculates the product for each row (column) in a matrix — product","text":"Note, method = \"expSumLog\", na.rm = FALSE, x contains missing values (NA NaN), calculated value also missing value.  Note depends platform whether NaN NA returned NaN exists, cf. .nan().","code":""},{"path":"/reference/rowProds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the product for each row (column) in a matrix — product","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowQuantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates quantiles for each row (column) in a matrix — rowQuantiles","title":"Estimates quantiles for each row (column) in a matrix — rowQuantiles","text":"Estimates quantiles row (column) matrix.","code":""},{"path":"/reference/rowQuantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates quantiles for each row (column) in a matrix — rowQuantiles","text":"","code":"rowQuantiles(x, rows = NULL, cols = NULL, probs = seq(from = 0, to = 1,   by = 0.25), na.rm = FALSE, type = 7L, digits = 7L, ...,   useNames = TRUE, drop = TRUE)  colQuantiles(x, rows = NULL, cols = NULL, probs = seq(from = 0, to = 1,   by = 0.25), na.rm = FALSE, type = 7L, digits = 7L, ...,   useNames = TRUE, drop = TRUE)"},{"path":"/reference/rowQuantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates quantiles for each row (column) in a matrix — rowQuantiles","text":"x integer, numeric logical NxK matrix N >= 0. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. probs numeric vector J probabilities [0, 1]. na.rm TRUE, missing values excluded. type integer specifying type estimator. See quantile details. digits integer specifying precision formatted percentages. used `useNames = FALSE`. **matrixStats** (< 0.63.0), default used `max(2L, getOption(\"digits\"))` inline R (< 4.1.0). ... Additional arguments passed quantile. useNames TRUE (default), names attributes result set, otherwise . drop TRUE, singleton dimensions result dropped, otherwise .","code":""},{"path":"/reference/rowQuantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates quantiles for each row (column) in a matrix — rowQuantiles","text":"Returns NxJ (KxJ) matrix, N (K) number rows (columns) J quantiles calculated. return type either integer numeric depending type.","code":""},{"path":[]},{"path":"/reference/rowQuantiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimates quantiles for each row (column) in a matrix — rowQuantiles","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowQuantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates quantiles for each row (column) in a matrix — rowQuantiles","text":"","code":"set.seed(1)  x <- matrix(rnorm(50 * 40), nrow = 50, ncol = 40) str(x) #>  num [1:50, 1:40] -0.626 0.184 -0.836 1.595 0.33 ...  probs <- c(0.25, 0.5, 0.75)  # Row quantiles q <- rowQuantiles(x, probs = probs) print(q) #>              25%          50%       75% #>  [1,] -0.6218885  0.106762508 0.5512421 #>  [2,] -0.3049272  0.056473676 0.7057890 #>  [3,] -0.9231354 -0.118361292 0.7422711 #>  [4,] -0.9322740 -0.207686499 0.3216682 #>  [5,] -0.7084443 -0.035489532 0.6621024 #>  [6,] -0.9664491 -0.216591179 0.6740367 #>  [7,] -1.0384055  0.042690771 0.6611677 #>  [8,] -0.6330825 -0.126332443 0.6960917 #>  [9,] -1.0094086 -0.041113665 0.6791968 #> [10,] -0.6327419  0.054660577 0.6222087 #> [11,] -0.5645887 -0.041477859 0.3713240 #> [12,] -0.2766925  0.110955064 0.7428664 #> [13,] -0.8453155 -0.334769330 0.5554439 #> [14,] -0.8897809 -0.324080709 0.3301178 #> [15,] -0.7251620 -0.188349538 0.3535435 #> [16,] -0.4797823  0.091562203 0.9726725 #> [17,] -0.6200479 -0.262020284 0.6356199 #> [18,] -0.9034017 -0.140455912 0.7528919 #> [19,] -0.7707722 -0.152329236 0.1729031 #> [20,] -0.3200883  0.302574383 1.2132039 #> [21,] -0.5291880 -0.214782932 0.5513092 #> [22,] -0.5356002  0.284290389 0.7989148 #> [23,] -0.5700878  0.149494637 0.8077412 #> [24,] -0.7503936 -0.077770110 0.5309214 #> [25,] -0.4267110  0.263799916 0.7293052 #> [26,] -0.9591707 -0.137898692 0.3078452 #> [27,] -1.0171397 -0.150011032 0.6103426 #> [28,] -0.2687164  0.085033622 0.7435987 #> [29,] -0.7860127 -0.286445627 0.5151106 #> [30,] -0.3577578 -0.022684187 0.5654628 #> [31,] -0.9519151 -0.538929463 0.4145123 #> [32,] -0.6973686 -0.118983171 0.9168207 #> [33,] -0.8027962 -0.204718112 0.4979713 #> [34,] -0.9273236 -0.141973088 0.4361869 #> [35,] -0.4532102  0.365402869 0.7459632 #> [36,] -0.4184018  0.227594464 0.7615129 #> [37,] -0.6367977  0.088614257 0.9296158 #> [38,] -0.4039084 -0.010658183 0.7876346 #> [39,] -0.3561294  0.373172018 1.0347134 #> [40,] -0.7034831 -0.005856479 0.5258082 #> [41,] -0.6183522 -0.064312777 0.7153803 #> [42,] -0.4235112  0.125571403 0.6848875 #> [43,] -0.5556839  0.124678003 0.5593517 #> [44,] -0.5123758  0.439573098 0.8486753 #> [45,] -1.0042770 -0.060667550 0.9481150 #> [46,] -1.0340398 -0.310771412 0.1371124 #> [47,] -0.8865014  0.142643098 0.9203617 #> [48,] -0.7968222 -0.172298103 0.6482758 #> [49,] -1.2293839 -0.139233624 0.5217433 #> [50,] -0.6553804 -0.262142026 0.4742108 q_0 <- apply(x, MARGIN = 1, FUN = quantile, probs = probs) stopifnot(all.equal(q_0, t(q)))  # Column IQRs q <- colQuantiles(x, probs = probs) print(q) #>              25%          50%       75% #>  [1,] -0.3720646  0.129104154 0.7279844 #>  [2,] -0.5721162  0.113797331 0.6065313 #>  [3,] -0.6469564 -0.246846356 0.2694256 #>  [4,] -0.7041278 -0.055939482 0.8196898 #>  [5,] -0.6089229 -0.029054330 0.6243079 #>  [6,] -0.4185202  0.146116784 0.7594495 #>  [7,] -0.4365107  0.091022110 0.8118479 #>  [8,] -0.6197929 -0.032415219 0.6618606 #>  [9,] -0.6727637 -0.273421020 0.6330157 #> [10,] -0.8825293 -0.011512761 0.5805665 #> [11,] -0.6381655  0.014950044 0.4831043 #> [12,] -0.7140804 -0.152388294 0.8106097 #> [13,] -0.7242296 -0.251628169 0.5387204 #> [14,] -1.0515879 -0.189977384 0.5571419 #> [15,] -0.9282411 -0.084192983 1.0093225 #> [16,] -0.8448598 -0.011103461 0.8216741 #> [17,] -0.5906504  0.161907795 0.7795111 #> [18,] -0.6499464 -0.059279451 0.5886333 #> [19,] -0.6094663  0.214748047 0.7317293 #> [20,] -0.7037132  0.022335956 0.5108679 #> [21,] -0.8504756  0.108484526 0.7602824 #> [22,] -0.7317770  0.007196516 0.7568682 #> [23,] -0.8515848 -0.319332762 0.5102586 #> [24,] -0.6366325 -0.249590203 0.6963329 #> [25,] -0.4791826  0.007958062 0.7657119 #> [26,] -0.4125492  0.291176656 1.0945407 #> [27,] -0.8272824 -0.267580711 0.3454911 #> [28,] -0.8544896 -0.197365516 0.4950755 #> [29,] -0.5364474  0.169648975 0.9752908 #> [30,] -0.6411633  0.057236706 0.5722226 #> [31,] -0.4458641 -0.018247105 0.7952345 #> [32,] -0.8358661  0.071609588 0.5724964 #> [33,] -0.5417449  0.124909830 0.5086025 #> [34,] -0.8415534 -0.215944585 0.5483784 #> [35,] -0.7080412 -0.017766239 1.0980467 #> [36,] -0.9491461 -0.256300105 0.4286593 #> [37,] -0.2463305  0.355645772 0.9952349 #> [38,] -0.5823101 -0.221579869 0.6592843 #> [39,] -0.8941790 -0.001721324 0.3406492 #> [40,] -0.6990172 -0.038793345 0.8817002 q_0 <- apply(x, MARGIN = 2, FUN = quantile, probs = probs) stopifnot(all.equal(q_0, t(q)))"},{"path":"/reference/rowRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the range of values in each row (column) of a matrix — rowRanges","title":"Gets the range of values in each row (column) of a matrix — rowRanges","text":"Gets range values row (column) matrix.","code":""},{"path":"/reference/rowRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the range of values in each row (column) of a matrix — rowRanges","text":"","code":"rowRanges(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),   ..., useNames = TRUE)  rowMins(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x), ...,   useNames = TRUE)  rowMaxs(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x), ...,   useNames = TRUE)  colRanges(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),   ..., useNames = TRUE)  colMins(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x), ...,   useNames = TRUE)  colMaxs(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x), ...,   useNames = TRUE)"},{"path":"/reference/rowRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the range of values in each row (column) of a matrix — rowRanges","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. na.rm TRUE, missing values excluded. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the range of values in each row (column) of a matrix — rowRanges","text":"rowRanges() (colRanges()) returns numeric Nx2 (Kx2) matrix, N (K) number rows (columns) ranges calculated. rowMins()/rowMaxs() (colMins()/colMaxs()) returns numeric  vector length N (K).","code":""},{"path":[]},{"path":"/reference/rowRanges.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the range of values in each row (column) of a matrix — rowRanges","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowRanks.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"Gets rank elements row (column) matrix.","code":""},{"path":"/reference/rowRanks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"","code":"rowRanks(x, rows = NULL, cols = NULL, ties.method = c(\"max\", \"average\",   \"first\", \"last\", \"random\", \"max\", \"min\", \"dense\"), dim. = dim(x), ...,   useNames = TRUE)  colRanks(x, rows = NULL, cols = NULL, ties.method = c(\"max\", \"average\",   \"first\", \"last\", \"random\", \"max\", \"min\", \"dense\"), dim. = dim(x),   preserveShape = FALSE, ..., useNames = TRUE)"},{"path":"/reference/rowRanks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. ties.method character string specifying ties treated.  details, see . dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise . preserveShape logical specifying whether matrix returned preserve input shape x, .","code":""},{"path":"/reference/rowRanks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"matrix type integer returned, unless ties.method = \"average\" type numeric. rowRanks() function always returns NxK matrix, N (K) number rows (columns) whose ranks calculated. colRanks() function returns NxK matrix, preserveShape = TRUE, otherwise KxN matrix. names x ignored absent result.","code":""},{"path":"/reference/rowRanks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"functions rank values treats missing values way rank(). equal values (\"ties\"), argument ties.method determines ranked among .  precisely, following values ties.method, index set ties consists : \"first\" - increasing values unique \"last\" - decreasing values unique \"min\" - identical values equaling minimum     original ranks \"max\" - identical values equaling maximum     original ranks \"average\" - identical values equal sample mean     original ranks. average calculated, returned     ranks may non-integer values \"random\" - randomly shuffled values original ranks. \"dense\" - increasing values unique ,     contrary \"first\", never contain gaps information ties.method = \"dense\", see frank() data.table package. information alternatives, see rank(). Note , due different randomization strategies, shuffling order produced functions using ties.method = \"random\" reproduce rank(). WARNING: backward-compatibility reasons, default ties.method = \"max\", differs rank() uses ties.method = \"average\" default. Since plan change default behavior future version, recommend explicitly specify intended value argument ties.method.","code":""},{"path":"/reference/rowRanks.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"Missing values ranked NA_integer_, na.last = \"keep\" rank() function.","code":""},{"path":"/reference/rowRanks.html","id":"performance","dir":"Reference","previous_headings":"","what":"Performance","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"implementation optimized speed memory.  avoid coercing doubles (hence memory allocation), unique implementation integer matrices. Furthermore, memory efficient colRanks(x, preserveShape = TRUE) t(colRanks(x, preserveShape = FALSE)).","code":""},{"path":[]},{"path":"/reference/rowRanks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gets the rank of the elements in each row (column) of a matrix — rowRanks","text":"Hector Corrada Bravo Harris Jaffee.  Peter Langfelder adding 'ties.method' support.  Brian Montgomery adding 'ties.method's. Henrik Bengtsson adapted original native implementation rowRanks() Robert Gentleman's rowQ() Biobase package.","code":""},{"path":"/reference/rowSds.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard deviation estimates for each row (column) in a matrix — rowMads","title":"Standard deviation estimates for each row (column) in a matrix — rowMads","text":"Standard deviation estimates row (column) matrix.","code":""},{"path":"/reference/rowSds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard deviation estimates for each row (column) in a matrix — rowMads","text":"","code":"rowMads(x, rows = NULL, cols = NULL, center = NULL, constant = 1.4826,   na.rm = FALSE, dim. = dim(x), ..., useNames = TRUE)  colMads(x, rows = NULL, cols = NULL, center = NULL, constant = 1.4826,   na.rm = FALSE, dim. = dim(x), ..., useNames = TRUE)  rowSds(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,   center = NULL, dim. = dim(x), ..., useNames = TRUE)  colSds(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,   center = NULL, dim. = dim(x), ..., useNames = TRUE)"},{"path":"/reference/rowSds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard deviation estimates for each row (column) in a matrix — rowMads","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. center (optional) center, defaults row means SD estimators row medians MAD estimators. constant scale factor.  See mad details. na.rm TRUE, missing values excluded. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... Additional arguments passed rowMeans() rowSums(). useNames TRUE (default), names attributes result set, otherwise . refine TRUE, `center` NULL, x numeric, extra effort used calculate average greater numerical precision, otherwise .","code":""},{"path":"/reference/rowSds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard deviation estimates for each row (column) in a matrix — rowMads","text":"Returns numeric  vector length N (K).","code":""},{"path":[]},{"path":"/reference/rowSds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standard deviation estimates for each row (column) in a matrix — rowMads","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowSums2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the sum for each row (column) in a matrix — rowSums2","title":"Calculates the sum for each row (column) in a matrix — rowSums2","text":"Calculates sum row (column) matrix.","code":""},{"path":"/reference/rowSums2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the sum for each row (column) in a matrix — rowSums2","text":"","code":"rowSums2(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),   ..., useNames = TRUE)  colSums2(x, rows = NULL, cols = NULL, na.rm = FALSE, dim. = dim(x),   ..., useNames = TRUE)"},{"path":"/reference/rowSums2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the sum for each row (column) in a matrix — rowSums2","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. na.rm TRUE, missing values excluded. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowSums2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the sum for each row (column) in a matrix — rowSums2","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowSums2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the sum for each row (column) in a matrix — rowSums2","text":"implementation rowSums2() colSums2() optimized speed memory.","code":""},{"path":"/reference/rowSums2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the sum for each row (column) in a matrix — rowSums2","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowTabulates.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulates the values in a matrix by row (column). — rowTabulates","title":"Tabulates the values in a matrix by row (column). — rowTabulates","text":"Tabulates values matrix row (column).","code":""},{"path":"/reference/rowTabulates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulates the values in a matrix by row (column). — rowTabulates","text":"","code":"rowTabulates(x, rows = NULL, cols = NULL, values = NULL, ...,   useNames = TRUE)  colTabulates(x, rows = NULL, cols = NULL, values = NULL, ...,   useNames = TRUE)"},{"path":"/reference/rowTabulates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulates the values in a matrix by row (column). — rowTabulates","text":"x integer, logical, raw NxK matrix. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. values vector J values count. NULL, (unique) values counted. ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowTabulates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulates the values in a matrix by row (column). — rowTabulates","text":"Returns NxJ (KxJ) matrix N (K) number row (column) vectors tabulated J number values counted.","code":""},{"path":"/reference/rowTabulates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulates the values in a matrix by row (column). — rowTabulates","text":"alternative functions, use table(x, row(x)) table(x, col(x)), exception latter support raw data type. missing values x, (rowTabulates(x) == t(table(x, row(x)))) (colTabulates(x) == t(table(x, col(x)))). missing values, (rowTabulates(x) == t(table(x, row(x), useNA = \"always\")[, seq_len(nrow(x))])) (colTabulates(x) == t(table(x, col(x), useNA = \"always\")[, seq_len(ncol(x))])).","code":""},{"path":"/reference/rowTabulates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tabulates the values in a matrix by row (column). — rowTabulates","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowTabulates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulates the values in a matrix by row (column). — rowTabulates","text":"","code":"x <- matrix(1:5, nrow = 10, ncol = 5) print(x) #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    2    2    2    2    2 #>  [3,]    3    3    3    3    3 #>  [4,]    4    4    4    4    4 #>  [5,]    5    5    5    5    5 #>  [6,]    1    1    1    1    1 #>  [7,]    2    2    2    2    2 #>  [8,]    3    3    3    3    3 #>  [9,]    4    4    4    4    4 #> [10,]    5    5    5    5    5 print(rowTabulates(x)) #>       1 2 3 4 5 #>  [1,] 5 0 0 0 0 #>  [2,] 0 5 0 0 0 #>  [3,] 0 0 5 0 0 #>  [4,] 0 0 0 5 0 #>  [5,] 0 0 0 0 5 #>  [6,] 5 0 0 0 0 #>  [7,] 0 5 0 0 0 #>  [8,] 0 0 5 0 0 #>  [9,] 0 0 0 5 0 #> [10,] 0 0 0 0 5 print(colTabulates(x)) #>      1 2 3 4 5 #> [1,] 2 2 2 2 2 #> [2,] 2 2 2 2 2 #> [3,] 2 2 2 2 2 #> [4,] 2 2 2 2 2 #> [5,] 2 2 2 2 2 # Count only certain values print(rowTabulates(x, values = 1:3)) #>       1 2 3 #>  [1,] 5 0 0 #>  [2,] 0 5 0 #>  [3,] 0 0 5 #>  [4,] 0 0 0 #>  [5,] 0 0 0 #>  [6,] 5 0 0 #>  [7,] 0 5 0 #>  [8,] 0 0 5 #>  [9,] 0 0 0 #> [10,] 0 0 0   y <- as.raw(x) dim(y) <- dim(x) print(y) #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]   01   01   01   01   01 #>  [2,]   02   02   02   02   02 #>  [3,]   03   03   03   03   03 #>  [4,]   04   04   04   04   04 #>  [5,]   05   05   05   05   05 #>  [6,]   01   01   01   01   01 #>  [7,]   02   02   02   02   02 #>  [8,]   03   03   03   03   03 #>  [9,]   04   04   04   04   04 #> [10,]   05   05   05   05   05 print(rowTabulates(y)) #>       0x1 0x2 0x3 0x4 0x5 #>  [1,]   5   0   0   0   0 #>  [2,]   0   5   0   0   0 #>  [3,]   0   0   5   0   0 #>  [4,]   0   0   0   5   0 #>  [5,]   0   0   0   0   5 #>  [6,]   5   0   0   0   0 #>  [7,]   0   5   0   0   0 #>  [8,]   0   0   5   0   0 #>  [9,]   0   0   0   5   0 #> [10,]   0   0   0   0   5 print(colTabulates(y)) #>      0x1 0x2 0x3 0x4 0x5 #> [1,]   2   2   2   2   2 #> [2,]   2   2   2   2   2 #> [3,]   2   2   2   2   2 #> [4,]   2   2   2   2   2 #> [5,]   2   2   2   2   2"},{"path":"/reference/rowVars.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance estimates for each row (column) in a matrix — rowVars","title":"Variance estimates for each row (column) in a matrix — rowVars","text":"Variance estimates row (column) matrix.","code":""},{"path":"/reference/rowVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance estimates for each row (column) in a matrix — rowVars","text":"","code":"rowVars(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,   center = NULL, dim. = dim(x), ..., useNames = TRUE)  colVars(x, rows = NULL, cols = NULL, na.rm = FALSE, refine = TRUE,   center = NULL, dim. = dim(x), ..., useNames = TRUE)"},{"path":"/reference/rowVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance estimates for each row (column) in a matrix — rowVars","text":"x NxK matrix , dim. specified, N * K vector. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. na.rm TRUE, missing values excluded. refine TRUE, `center` NULL, x numeric, extra effort used calculate average greater numerical precision, otherwise . center (optional; vector length N (K)) row (column) means already estimated, can pre-specified using argument. avoid re-estimating . _Warning: important non-biased sample mean estimate passed. , variance estimate spread also biased._ NULL (default), row/column means estimated internally. dim. integer vector length two specifying dimension x, also matrix.  Comment: reason argument named period end purely technical (get run-time error try name dim). ... Additional arguments passed rowMeans() rowSums(). useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance estimates for each row (column) in a matrix — rowVars","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowVars.html","id":"providing-center-estimates","dir":"Reference","previous_headings":"","what":"Providing center estimates","title":"Variance estimates for each row (column) in a matrix — rowVars","text":"sample variance estimated \\(n/(n-1) * mean((x - center)^2)\\), \\(center\\) estimated sample mean, default. matrixStats (< 0.58.0), \\(n/(n-1) * (mean(x^2) - center^2)\\) used.  formulas give result _when_ `center` sample mean estimate. Argument `center` can used provide already existing estimate. important sample mean estimate passed. , variance estimate spread biased. time , order lower risk mistakes, argument `center` occasionally validated sample-mean estimate.  discrepancy detected, informative error provided prevent incorrect variance estimates used. performance reasons, check performed every 50 times. frequency can controlled R option `matrixStats.vars.formula.freq`, whose default can set environment variable `R_MATRIXSTATS_VARS_FORMULA_FREQ`.","code":""},{"path":[]},{"path":"/reference/rowVars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variance estimates for each row (column) in a matrix — rowVars","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance estimates for each row (column) in a matrix — rowVars","text":"","code":"set.seed(1)  x <- matrix(rnorm(20), nrow = 5, ncol = 4) print(x) #>            [,1]       [,2]       [,3]        [,4] #> [1,] -0.6264538 -0.8204684  1.5117812 -0.04493361 #> [2,]  0.1836433  0.4874291  0.3898432 -0.01619026 #> [3,] -0.8356286  0.7383247 -0.6212406  0.94383621 #> [4,]  1.5952808  0.5757814 -2.2146999  0.82122120 #> [5,]  0.3295078 -0.3053884  1.1249309  0.59390132  # Row averages print(rowMeans(x)) #> [1] 0.004981341 0.261181337 0.056322931 0.194395865 0.435737906 print(rowMedians(x)) #> [1] -0.33569371  0.28674328  0.05854206  0.69850127  0.46170455  # Column averages print(colMeans(x)) #> [1] 0.12926990 0.13513567 0.03812297 0.45956697 print(colMedians(x)) #> [1] 0.1836433 0.4874291 0.3898432 0.5939013   # Row variabilities print(rowVars(x)) #> [1] 1.11767161 0.05022969 0.83582537 2.76819528 0.35351857 print(rowSds(x)) #> [1] 1.0571999 0.2241198 0.9142349 1.6637894 0.5945743 print(rowMads(x)) #> [1] 0.5749039 0.2251964 1.1601914 0.7557549 0.5896472 print(rowIQRs(x)) #> [1] 1.0192025 0.2805548 1.4645402 1.1365751 0.5558750  # Column variabilities print(rowVars(x)) #> [1] 1.11767161 0.05022969 0.83582537 2.76819528 0.35351857 print(colSds(x)) #> [1] 0.9610394 0.6688342 1.4988744 0.4648177 print(colMads(x)) #> [1] 1.2010500 0.3719779 1.4990329 0.5188135 print(colIQRs(x)) #> [1] 0.9559616 0.8811697 1.7461715 0.8374115  # Row ranges print(rowRanges(x)) #>             [,1]      [,2] #> [1,] -0.82046838 1.5117812 #> [2,] -0.01619026 0.4874291 #> [3,] -0.83562861 0.9438362 #> [4,] -2.21469989 1.5952808 #> [5,] -0.30538839 1.1249309 print(cbind(rowMins(x), rowMaxs(x))) #>             [,1]      [,2] #> [1,] -0.82046838 1.5117812 #> [2,] -0.01619026 0.4874291 #> [3,] -0.83562861 0.9438362 #> [4,] -2.21469989 1.5952808 #> [5,] -0.30538839 1.1249309 print(cbind(rowOrderStats(x, which = 1), rowOrderStats(x, which = ncol(x)))) #>             [,1]      [,2] #> [1,] -0.82046838 1.5117812 #> [2,] -0.01619026 0.4874291 #> [3,] -0.83562861 0.9438362 #> [4,] -2.21469989 1.5952808 #> [5,] -0.30538839 1.1249309  # Column ranges print(colRanges(x)) #>             [,1]      [,2] #> [1,] -0.83562861 1.5952808 #> [2,] -0.82046838 0.7383247 #> [3,] -2.21469989 1.5117812 #> [4,] -0.04493361 0.9438362 print(cbind(colMins(x), colMaxs(x))) #>             [,1]      [,2] #> [1,] -0.83562861 1.5952808 #> [2,] -0.82046838 0.7383247 #> [3,] -2.21469989 1.5117812 #> [4,] -0.04493361 0.9438362 print(cbind(colOrderStats(x, which = 1), colOrderStats(x, which = nrow(x)))) #>             [,1]      [,2] #> [1,] -0.83562861 1.5952808 #> [2,] -0.82046838 0.7383247 #> [3,] -2.21469989 1.5117812 #> [4,] -0.04493361 0.9438362   x <- matrix(rnorm(2000), nrow = 50, ncol = 40)  # Row standard deviations d <- rowDiffs(x) s1 <- rowSds(d) / sqrt(2) s2 <- rowSds(x) print(summary(s1 - s2)) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -0.19874 -0.04460  0.01411  0.01097  0.07339  0.27371   # Column standard deviations d <- colDiffs(x) s1 <- colSds(d) / sqrt(2) s2 <- colSds(x) print(summary(s1 - s2)) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -0.13188 -0.02160  0.02329  0.01879  0.07141  0.15346"},{"path":"/reference/rowWeightedMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","title":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","text":"Calculates weighted means row (column) matrix.","code":""},{"path":"/reference/rowWeightedMeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","text":"","code":"rowWeightedMeans(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   ..., useNames = TRUE)  colWeightedMeans(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   ..., useNames = TRUE)"},{"path":"/reference/rowWeightedMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","text":"x NxK matrix , dim. specified, N * K vector. w numeric vector length K (N). rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. na.rm TRUE, missing values excluded. ... used. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowWeightedMeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowWeightedMeans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","text":"implementations methods optimized speed memory.  weights given, corresponding rowMeans()/colMeans() used.","code":""},{"path":[]},{"path":"/reference/rowWeightedMeans.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowWeightedMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the weighted means for each row (column) in a matrix — rowWeightedMeans","text":"","code":"x <- matrix(rnorm(20), nrow = 5, ncol = 4) print(x) #>            [,1]       [,2]        [,3]       [,4] #> [1,] -1.7347494 -0.4639130 -0.74532038  1.2462114 #> [2,] -0.8374046 -0.4265004 -0.48647150  2.0085900 #> [3,] -0.7157526 -1.7030952 -0.35303944 -1.8544195 #> [4,]  0.3748210 -1.0414974 -0.06230052 -0.4627144 #> [5,]  2.3833280  0.7687350  1.61961511  1.0431038  # Non-weighted row averages mu_0 <- rowMeans(x) mu <- rowWeightedMeans(x) stopifnot(all.equal(mu, mu_0))  # Weighted row averages (uniform weights) w <- rep(2.5, times = ncol(x)) mu <- rowWeightedMeans(x, w = w) stopifnot(all.equal(mu, mu_0))  # Weighted row averages (excluding some columns) w <- c(1, 1, 0, 1) mu_0 <- rowMeans(x[, (w == 1), drop = FALSE]) mu <- rowWeightedMeans(x, w = w) stopifnot(all.equal(mu, mu_0))  # Weighted row averages (excluding some columns) w <- c(0, 1, 0, 0) mu_0 <- rowMeans(x[, (w == 1), drop = FALSE]) mu <- rowWeightedMeans(x, w = w) stopifnot(all.equal(mu, mu_0))  # Weighted averages by rows and columns w <- 1:4 mu_1 <- rowWeightedMeans(x, w = w) mu_2 <- colWeightedMeans(t(x), w = w) stopifnot(all.equal(mu_2, mu_1))"},{"path":"/reference/rowWeightedMedians.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","title":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","text":"Calculates weighted medians row (column) matrix.","code":""},{"path":"/reference/rowWeightedMedians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","text":"","code":"rowWeightedMedians(x, w = NULL, rows = NULL, cols = NULL,   na.rm = FALSE, ..., useNames = TRUE)  colWeightedMedians(x, w = NULL, rows = NULL, cols = NULL,   na.rm = FALSE, ..., useNames = TRUE)"},{"path":"/reference/rowWeightedMedians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","text":"x NxK matrix , dim. specified, N * K vector. w numeric vector length K (N). rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. na.rm TRUE, missing values excluded. ... Additional arguments passed weightedMedian(). useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/rowWeightedMedians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","text":"Returns numeric  vector length N (K).","code":""},{"path":"/reference/rowWeightedMedians.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","text":"implementations methods optimized speed memory.  weights given, corresponding rowMedians()/colMedians() used.","code":""},{"path":[]},{"path":"/reference/rowWeightedMedians.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","text":"Henrik Bengtsson","code":""},{"path":"/reference/rowWeightedMedians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the weighted medians for each row (column) in a matrix — rowWeightedMedians","text":"","code":"x <- matrix(rnorm(20), nrow = 5, ncol = 4) print(x) #>            [,1]       [,2]       [,3]       [,4] #> [1,] -0.3038375  1.8972581  1.6235322 -0.2564806 #> [2,]  0.3180807 -0.2615856 -1.5901587 -2.0828546 #> [3,] -0.6487490  1.7879817 -0.6099912 -1.4171540 #> [4,] -1.8689043  0.8673005 -0.3132811  0.6107810 #> [5,] -1.2069966  0.7025809 -0.9221298  0.2415208  # Non-weighted row averages mu_0 <- rowMedians(x) mu <- rowWeightedMedians(x) stopifnot(all.equal(mu, mu_0))  # Weighted row averages (uniform weights) w <- rep(2.5, times = ncol(x)) mu <- rowWeightedMedians(x, w = w) stopifnot(all.equal(mu, mu_0))  # Weighted row averages (excluding some columns) w <- c(1, 1, 0, 1) mu_0 <- rowMedians(x[, (w == 1), drop = FALSE]) mu <- rowWeightedMedians(x, w = w) stopifnot(all.equal(mu, mu_0))  # Weighted row averages (excluding some columns) w <- c(0, 1, 0, 0) mu_0 <- rowMedians(x[, (w == 1), drop = FALSE]) mu <- rowWeightedMedians(x, w = w) stopifnot(all.equal(mu, mu_0))  # Weighted averages by rows and columns w <- 1:4 mu_1 <- rowWeightedMedians(x, w = w) mu_2 <- colWeightedMedians(t(x), w = w) stopifnot(all.equal(mu_2, mu_1))"},{"path":"/reference/signTabulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the number of negative, zero, positive and missing values — signTabulate","title":"Calculates the number of negative, zero, positive and missing values — signTabulate","text":"Calculates number negative, zero, positive missing values numeric vector.  double vectors, number negative positive infinite values also counted.","code":""},{"path":"/reference/signTabulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the number of negative, zero, positive and missing values — signTabulate","text":"","code":"signTabulate(x, idxs = NULL, ...)"},{"path":"/reference/signTabulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the number of negative, zero, positive and missing values — signTabulate","text":"x numeric vector. idxs vector indicating subset elements operate . NULL, subsetting done. ... used.","code":""},{"path":"/reference/signTabulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the number of negative, zero, positive and missing values — signTabulate","text":"Returns named numeric vector.","code":""},{"path":[]},{"path":"/reference/signTabulate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the number of negative, zero, positive and missing values — signTabulate","text":"Henrik Bengtsson","code":""},{"path":"/reference/sum2.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast sum over subset of vector elements — sum2","title":"Fast sum over subset of vector elements — sum2","text":"Computes sum subset values.","code":""},{"path":"/reference/sum2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast sum over subset of vector elements — sum2","text":"","code":"sum2(x, idxs = NULL, na.rm = FALSE, mode = typeof(x), ...)"},{"path":"/reference/sum2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast sum over subset of vector elements — sum2","text":"x NxK matrix , dim. specified, N * K vector. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. mode character string specifying data type return value.  Default use mode argument x, unless logical defaults \"integer\". ... used.","code":""},{"path":"/reference/sum2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast sum over subset of vector elements — sum2","text":"Returns scalar data type specified argument mode. mode = \"integer\", integer overflow occurs sum outside range defined integer values. Note intermediate sum (sum(x[1:n])) internally represented floating point value therefore never outside range. mode = \"integer\" typeof(x) == \"double\", warning generated.","code":""},{"path":"/reference/sum2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast sum over subset of vector elements — sum2","text":"sum2(x, idxs) gives equivalent results sum(x[idxs]), faster memory efficient since avoids actual subsetting requires copying elements garbage collection thereof. Furthermore, sum2(x, mode = \"double\") equivalent sum(.numeric(x)) may therefore used avoid integer overflow(*), time much memory efficient regular sum() function x integer vector. (*) R (>= 3.5.0), sum(x) longer integer overflow return NA_integer_. Instead return correct sum form double value.","code":""},{"path":[]},{"path":"/reference/sum2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast sum over subset of vector elements — sum2","text":"Henrik Bengtsson","code":""},{"path":"/reference/sum2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast sum over subset of vector elements — sum2","text":"","code":"x <- 1:10 n <- length(x)  idxs <- seq(from = 1, to = n, by = 2) s1 <- sum(x[idxs])                     # 25 s2 <- sum2(x, idxs = idxs)             # 25 stopifnot(identical(s1, s2))  idxs <- seq(from = n, to = 1, by = -2) s1 <- sum(x[idxs])                     # 25 s2 <- sum2(x, idxs = idxs)             # 25 stopifnot(identical(s1, s2))  s1 <- sum(x)                           # 55 s2 <- sum2(x)                          # 55 stopifnot(identical(s1, s2))   # Total gives integer overflow x <- c(.Machine$integer.max, 1L, -.Machine$integer.max) s1 <- sum(x[1:2])                      # NA_integer_ in R (< 3.5.0) s2 <- sum2(x[1:2])                     # NA_integer_ #> Warning: Integer overflow. Use sum2(..., mode = \"double\") to avoid this.  # Total gives integer overflow (coerce to numeric) s1 <- sum(as.numeric(x[1:2]))          # 2147483648 s2 <- sum2(as.numeric(x[1:2]))         # 2147483648 s3 <- sum2(x[1:2], mode = \"double\")    # 2147483648 w/out copy stopifnot(identical(s1, s2)) stopifnot(identical(s1, s3))  # Cumulative sum would give integer overflow but not the total s1 <- sum(x)                           # 1L s2 <- sum2(x)                          # 1L stopifnot(identical(s1, s2))"},{"path":"/reference/validateIndices.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate indices — validateIndices","title":"Validate indices — validateIndices","text":"Computes validated positive indices given indices.","code":""},{"path":"/reference/validateIndices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate indices — validateIndices","text":"","code":"validateIndices(idxs = NULL, maxIdx, allowOutOfBound = TRUE)"},{"path":"/reference/validateIndices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate indices — validateIndices","text":"idxs vector indicating subset elements operate . NULL, subsetting done. maxIdx possible max index. allowOutOfBound Allow positive bound indicate NA.","code":""},{"path":"/reference/validateIndices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate indices — validateIndices","text":"Returns validated integers list indicating indices. indices represented integer, indices returned doubles.","code":""},{"path":"/reference/validateIndices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate indices — validateIndices","text":"WARNING: function defunct removed future version.","code":""},{"path":"/reference/varDiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of scale based on sequential-order differences — varDiff","title":"Estimation of scale based on sequential-order differences — varDiff","text":"Estimation scale based sequential-order differences, corresponding scale estimates provided var, sd, mad IQR.","code":""},{"path":"/reference/varDiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of scale based on sequential-order differences — varDiff","text":"","code":"varDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0, ...)  sdDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0, ...)  madDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0,   constant = 1.4826, ...)  iqrDiff(x, idxs = NULL, na.rm = FALSE, diff = 1L, trim = 0, ...)  rowVarDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)  colVarDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)  rowSdDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)  colSdDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)  rowMadDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)  colMadDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)  rowIQRDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)  colIQRDiffs(x, rows = NULL, cols = NULL, na.rm = FALSE, diff = 1L,   trim = 0, ..., useNames = TRUE)"},{"path":"/reference/varDiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of scale based on sequential-order differences — varDiff","text":"x numeric vector length N numeric NxK matrix. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. diff positional distance elements difference calculated. trim double [0,1/2] specifying fraction observations trimmed end (sorted) x estimation. ... used. constant scale factor adjusting asymptotically normal consistency. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/varDiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimation of scale based on sequential-order differences — varDiff","text":"Returns numeric  vector length 1, length N, length K.","code":""},{"path":"/reference/varDiff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of scale based on sequential-order differences — varDiff","text":"Note n-order difference MAD estimates, just like ordinary MAD estimate mad, apply correction factor estimates consistent standard deviation Gaussian distributions. interquartile range (IQR) estimates apply correction factor.  asymptotically normal consistency wanted, correction factor IQR estimate 1 / (2 * qnorm(3/4)), half used MAD estimates, 1 / qnorm(3/4).  correction factor needs applied manually, .e. constant argument IQR functions.","code":""},{"path":"/reference/varDiff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimation of scale based on sequential-order differences — varDiff","text":"[1] J. von Neumann et al., mean square successive difference.  Annals Mathematical Statistics, 1941, 12, 153-162.","code":""},{"path":[]},{"path":"/reference/varDiff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimation of scale based on sequential-order differences — varDiff","text":"Henrik Bengtsson","code":""},{"path":"/reference/weightedMad.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Median Absolute Deviation (MAD) — weightedMad","title":"Weighted Median Absolute Deviation (MAD) — weightedMad","text":"Computes weighted MAD numeric vector.","code":""},{"path":"/reference/weightedMad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Median Absolute Deviation (MAD) — weightedMad","text":"","code":"weightedMad(x, w = NULL, idxs = NULL, na.rm = FALSE, constant = 1.4826,   center = NULL, ...)  rowWeightedMads(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   constant = 1.4826, center = NULL, ..., useNames = TRUE)  colWeightedMads(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   constant = 1.4826, center = NULL, ..., useNames = TRUE)"},{"path":"/reference/weightedMad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Median Absolute Deviation (MAD) — weightedMad","text":"x vector type integer, numeric, logical. w vector weights length x giving weights use element x. Negative weights treated zero weights. Default value equal weight values. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. constant numeric scale factor, cf. mad. center Optional numeric scalar specifying center location data.  NULL, estimated data. ... used. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/weightedMad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Median Absolute Deviation (MAD) — weightedMad","text":"Returns numeric scalar.","code":""},{"path":"/reference/weightedMad.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Weighted Median Absolute Deviation (MAD) — weightedMad","text":"Missing values dropped beginning, argument na.rm TRUE, otherwise .","code":""},{"path":[]},{"path":"/reference/weightedMad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted Median Absolute Deviation (MAD) — weightedMad","text":"Henrik Bengtsson","code":""},{"path":"/reference/weightedMad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Median Absolute Deviation (MAD) — weightedMad","text":"","code":"x <- 1:10 n <- length(x)  m1 <- mad(x) m2 <- weightedMad(x) stopifnot(identical(m1, m2))  w <- rep(1, times = n) m1 <- weightedMad(x, w) stopifnot(identical(m1, m2))  # All weight on the first value w[1] <- Inf m <- weightedMad(x, w) stopifnot(m  == 0)  # All weight on the first two values w[1:2] <- Inf m1 <- mad(x[1:2]) m2 <- weightedMad(x, w) stopifnot(identical(m1, m2))  # All weights set to zero w <- rep(0, times = n) m <- weightedMad(x, w) stopifnot(is.na(m))"},{"path":"/reference/weightedMean.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Arithmetic Mean — weightedMean","title":"Weighted Arithmetic Mean — weightedMean","text":"Computes weighted sample mean numeric vector.","code":""},{"path":"/reference/weightedMean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Arithmetic Mean — weightedMean","text":"","code":"weightedMean(x, w = NULL, idxs = NULL, na.rm = FALSE, refine = FALSE,   ...)"},{"path":"/reference/weightedMean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Arithmetic Mean — weightedMean","text":"x NxK matrix , dim. specified, N * K vector. w vector weights length x giving weights use element x. Negative weights treated zero weights. Default value equal weight values. missing-value weight exists, result always missing value. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. refine TRUE x numeric, extra effort used calculate average greater numerical precision, otherwise . ... used.","code":""},{"path":"/reference/weightedMean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Arithmetic Mean — weightedMean","text":"Returns numeric scalar.  x zero length, NaN returned, consistent mean().","code":""},{"path":"/reference/weightedMean.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Weighted Arithmetic Mean — weightedMean","text":"function handles missing values consistently weighted.mean.  precisely, na.rm = FALSE, missing values either x w give result NA_real_.  na.rm = TRUE, (x, w) data points x missing skipped.  Note x w missing data points, also skipped (rule).  However, w missing, final results always NA_real_ regardless na.rm.","code":""},{"path":[]},{"path":"/reference/weightedMean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted Arithmetic Mean — weightedMean","text":"Henrik Bengtsson","code":""},{"path":"/reference/weightedMean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Arithmetic Mean — weightedMean","text":"","code":"x <- 1:10 n <- length(x)  w <- rep(1, times = n) m0 <- weighted.mean(x, w) m1 <- weightedMean(x, w) stopifnot(identical(m1, m0))  # Pull the mean towards zero w[1] <- 5 m0 <- weighted.mean(x, w) m1 <- weightedMean(x, w) stopifnot(identical(m1, m0))  # Put even more weight on the zero w[1] <- 8.5 m0 <- weighted.mean(x, w) m1 <- weightedMean(x, w) stopifnot(identical(m1, m0))  # All weight on the first value w[1] <- Inf m0 <- weighted.mean(x, w) m1 <- weightedMean(x, w) stopifnot(identical(m1, m0))  # All weight on the last value w[1] <- 1 w[n] <- Inf m0 <- weighted.mean(x, w) m1 <- weightedMean(x, w) stopifnot(identical(m1, m0))  # All weights set to zero w <- rep(0, times = n) m0 <- weighted.mean(x, w) m1 <- weightedMean(x, w) stopifnot(identical(m1, m0))"},{"path":"/reference/weightedMedian.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Median Value — weightedMedian","title":"Weighted Median Value — weightedMedian","text":"Computes weighted median numeric vector.","code":""},{"path":"/reference/weightedMedian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Median Value — weightedMedian","text":"","code":"weightedMedian(x, w = NULL, idxs = NULL, na.rm = FALSE,   interpolate = is.null(ties), ties = NULL, ...)"},{"path":"/reference/weightedMedian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Median Value — weightedMedian","text":"x vector type integer, numeric, logical. w vector weights length x giving weights use element x. Negative weights treated zero weights. Default value equal weight values. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm logical value indicating whether NA values x stripped computation proceeds, .  NA, check NAs done. interpolate TRUE, linear interpolation used get consistent estimate weighted median. ties interpolate == FALSE, character string specifying solve ties two x's satisfying weighted median criteria.  Note two values can satisfy criteria. ties \"min\" (\"lower weighted median\"), smaller value two returned \"max\" (\"upper weighted median\"), larger value returned.  ties \"mean\", mean two values returned.  Finally, ties \"weighted\" (NULL) weighted average two returned, weights weights values x[] <= x[k] x[] >= x[k], respectively. ... used.","code":""},{"path":"/reference/weightedMedian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Median Value — weightedMedian","text":"Returns numeric scalar. n elements x = c(x[1], x[2], ..., x[n]) positive weights w = c(w[1], w[2], ..., w[n]) sum(w) = S, weighted median defined element x[k] total weight elements x[] < x[k] less equal S/2 total weight elements x[] > x[k] less equal S/2 (c.f. [1]). using linear interpolation, weighted mean x[k-1] x[k] weights S[k-1] S[k] corresponding cumulative weights two elements used estimate. w missing elements x given positive weight. weights zero, NA_real_ returned. one weights Inf, weights weight others zero. makes things easier cases weights result division zero. missing values w part calculation (subsetting dropping missing values x), final result always NA type x. weighted median solves following optimization problem: $$\\alpha^* = \\arg_\\alpha \\min \\sum_{= 1}^{n} w_i |x_i-\\alpha|$$ \\(x = (x_1, x_2, \\ldots, x_n)\\) scalars \\(w = (w_1, w_2, \\ldots, w_n)\\) corresponding \"weights\" individual \\(x\\) value.","code":""},{"path":"/reference/weightedMedian.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weighted Median Value — weightedMedian","text":"[1] T.H. Cormen, C.E. Leiserson, R.L. Rivest, Introduction Algorithms, MIT Press, Massachusetts Institute Technology, 1989.","code":""},{"path":[]},{"path":"/reference/weightedMedian.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted Median Value — weightedMedian","text":"Henrik Bengtsson Ola Hossjer, Centre Mathematical Sciences, Lund University.  Thanks Roger Koenker, Econometrics, University Illinois, initial ideas.","code":""},{"path":"/reference/weightedMedian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Median Value — weightedMedian","text":"","code":"x <- 1:10 n <- length(x)  m1 <- median(x)                             # 5.5 m2 <- weightedMedian(x)                     # 5.5 stopifnot(identical(m1, m2))  w <- rep(1, times = n) m1 <- weightedMedian(x, w)                  # 5.5 (default) m2 <- weightedMedian(x, ties = \"weighted\")  # 5.5 (default) m3 <- weightedMedian(x, ties = \"min\")       # 5 m4 <- weightedMedian(x, ties = \"max\")       # 6 stopifnot(identical(m1, m2))  # Pull the median towards zero w[1] <- 5 m1 <- weightedMedian(x, w)                  # 3.5 y <- c(rep(0, times = w[1]), x[-1])         # Only possible for integer weights m2 <- median(y)                             # 3.5 stopifnot(identical(m1, m2))  # Put even more weight on the zero w[1] <- 8.5 weightedMedian(x, w)                # 2 #> [1] 1.947368  # All weight on the first value w[1] <- Inf weightedMedian(x, w)                # 1 #> [1] 1  # All weight on the last value w[1] <- 1 w[n] <- Inf weightedMedian(x, w)                # 10 #> [1] 10  # All weights set to zero w <- rep(0, times = n) weightedMedian(x, w)                # NA #> [1] NA  # Simple benchmarking bench <- function(N = 1e5, K = 10) {   x <- rnorm(N)   gc()   t <- c()   t[1] <- system.time(for (k in 1:K) median(x))[3]   t[2] <- system.time(for (k in 1:K) weightedMedian(x))[3]   t <- t / t[1]   names(t) <- c(\"median\", \"weightedMedian\")   t }  print(bench(N =     5, K = 100)) #>         median weightedMedian  #>              1              0  print(bench(N =    50, K = 100)) #>         median weightedMedian  #>      1.0000000      0.3333333  print(bench(N =   200, K = 100)) #>         median weightedMedian  #>      1.0000000      0.3333333  print(bench(N =  1000, K = 100)) #>         median weightedMedian  #>      1.0000000      0.6666667  print(bench(N =  10e3, K =  20)) #>         median weightedMedian  #>            1.0            3.5  print(bench(N = 100e3, K =  20)) #>         median weightedMedian  #>       1.000000       4.536585"},{"path":"/reference/weightedVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted variance and weighted standard deviation — weightedVar","title":"Weighted variance and weighted standard deviation — weightedVar","text":"Computes weighted variance / standard deviation numeric vector across rows columns matrix.","code":""},{"path":"/reference/weightedVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted variance and weighted standard deviation — weightedVar","text":"","code":"weightedVar(x, w = NULL, idxs = NULL, na.rm = FALSE, center = NULL,   ...)  weightedSd(...)  rowWeightedVars(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   ..., useNames = TRUE)  colWeightedVars(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   ..., useNames = TRUE)  rowWeightedSds(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   ..., useNames = TRUE)  colWeightedSds(x, w = NULL, rows = NULL, cols = NULL, na.rm = FALSE,   ..., useNames = TRUE)"},{"path":"/reference/weightedVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted variance and weighted standard deviation — weightedVar","text":"x vector type integer, numeric, logical. w vector weights length x giving weights use element x. Negative weights treated zero weights. Default value equal weight values. idxs vector indicating subset elements operate . NULL, subsetting done. na.rm TRUE, missing values excluded. center Optional numeric scalar specifying center location data.  NULL, estimated data. ... used. rows vector indicating subset rows operate . NULL, subsetting done. cols vector indicating subset columns operate . NULL, subsetting done. useNames TRUE (default), names attributes result set, otherwise .","code":""},{"path":"/reference/weightedVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted variance and weighted standard deviation — weightedVar","text":"Returns numeric scalar.","code":""},{"path":"/reference/weightedVar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted variance and weighted standard deviation — weightedVar","text":"estimator used one used \"unbiased\" estimator Hmisc package. specifically, weightedVar(x, w = w) == Hmisc::wtd.var(x, weights = w),","code":""},{"path":"/reference/weightedVar.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Weighted variance and weighted standard deviation — weightedVar","text":"function handles missing values consistently weightedMean(). precisely, na.rm = FALSE, missing values either x w give result NA_real_. na.rm = TRUE, (x, w) data points x missing skipped.  Note x w missing data points, also skipped (rule). However, w missing, final results always NA_real_ regardless na.rm.","code":""},{"path":[]},{"path":"/reference/weightedVar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted variance and weighted standard deviation — weightedVar","text":"Henrik Bengtsson","code":""},{"path":"/reference/x_OP_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","title":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","text":"Fast calculation 'z <- x OP y' 'z <- t(t(x) OP y)', OP can +, -, *, /.  + *, na.rm = TRUE drop missing values first.","code":""},{"path":"/reference/x_OP_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","text":"","code":"x_OP_y(x, y, OP, xrows = NULL, xcols = NULL, yidxs = NULL,   commute = FALSE, na.rm = FALSE)  t_tx_OP_y(x, y, OP, xrows = NULL, xcols = NULL, yidxs = NULL,   commute = FALSE, na.rm = FALSE)"},{"path":"/reference/x_OP_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","text":"x numeric logical NxK matrix. y numeric logical vector length L. OP character specifying operator use. xrows, xcols vector indicating subset rows (/columns) operate 'x'. NULL, subsetting done. yidxs vector indicating subset elements operate 'y'. NULL, subsetting done. commute TRUE, 'y OP x' ('t(y OP t(x))') calculated, otherwise 'x OP y' ('t(t(x) OP y)'). na.rm TRUE, missing values excluded.","code":""},{"path":"/reference/x_OP_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","text":"Returns numeric NxK matrix.","code":""},{"path":"/reference/x_OP_y.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","text":"na.rm = TRUE, missing values \"dropped\" applying operator pair values.  instance, x[1, 1] missing value, result x[1, 1] + y[1] equals y[1].  also y[1] missing value, result missing value.  applies additions multiplications.  subtractions divisions, argument na.rm ignored.","code":""},{"path":"/reference/x_OP_y.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","text":"Henrik Bengtsson","code":""},{"path":"/reference/x_OP_y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast calculation of 'z <- x OP y' and 'z <- t(t(x) OP y)' — x_OP_y","text":"","code":"x <- matrix(c(1, 2, 3, NA, 5, 6), nrow = 3, ncol = 2)  # Add 'y' to each column y <- 1:2 z0 <- x + y z1 <- x_OP_y(x, y, OP = \"+\") print(z1) #>      [,1] [,2] #> [1,]    2   NA #> [2,]    4    6 #> [3,]    4    8 stopifnot(all.equal(z1, z0))   # Add 'y' to each row y <- 1:3 z0 <- t(t(x) + y) z1 <- t_tx_OP_y(x, y, OP = \"+\") print(z1) #>      [,1] [,2] #> [1,]    2   NA #> [2,]    5    6 #> [3,]    5    9 stopifnot(all.equal(z1, z0))"},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version (development version)","text":"Error messages report large integers (> 2^31 - 1), render integers correctly.","code":""},{"path":"/news/index.html","id":"version-110-2023-11-06","dir":"Changelog","previous_headings":"","what":"Version 1.1.0 [2023-11-06]","title":"Version 1.1.0 [2023-11-06]","text":"CRAN release: 2023-11-07","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-1-1-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 1.1.0 [2023-11-06]","text":"useNames = NA defunct R (>= 4.4.0). Remains deprecated R (< 4.4.0) now.","code":""},{"path":"/news/index.html","id":"miscellaneous-1-1-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"Version 1.1.0 [2023-11-06]","text":"deprecation warning using useNames = NA, suggested using useNames = TRUE twice instead also useNames = FALSE.","code":""},{"path":"/news/index.html","id":"version-100-2023-06-01","dir":"Changelog","previous_headings":"","what":"Version 1.0.0 [2023-06-01]","title":"Version 1.0.0 [2023-06-01]","text":"CRAN release: 2023-06-02","code":""},{"path":"/news/index.html","id":"significant-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 1.0.0 [2023-06-01]","text":"useNames = TRUE new default functions. backward compatibility, used useNames = NA. colQuantiles() rowQuantiles() gained argument digits, just like stats::quantile() gained argument R 4.1.0. colQuantiles() rowQuantiles() sets quantile percentage names useNames = TRUE, align argument names stats::quantile() works base R.","code":""},{"path":"/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 1.0.0 [2023-06-01]","text":"colMeans2() rowMeans2() gained argument refine. refine = TRUE, sample average numeric matrices calculated using two-pass scan, resulting higher precision. default refine = TRUE align colMeans(), also mean2() package. higher precision needed, using refine = FALSE almost twice fast. colSds(), rowSds(), colVars(), rowVars() gained argument refine. refine = TRUE, sample average numeric matrices calculated using two-pass scan, resulting higher precision estimate center therefore also variance.","code":""},{"path":"/news/index.html","id":"performance-1-0-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"Version 1.0.0 [2023-06-01]","text":"Unnecessary checks missing indices eliminated, yielding better performance. change affect user-facing API. Made colQuantiles() rowQuantiles() bit faster type    != 7L, making sure percentage names generated , instead per column row.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 1.0.0 [2023-06-01]","text":"Contrary functions package, works base R, functions colCumsums(), colCumprods(), colCummins(), colCummaxs(), colRanges(), colRanks(), colDiffs(), plus corresponding row-based versions, drop names attribute row column names NULL. Now also functions behaves case neither row column names set. colQuantiles() rowQuantiles() generate quantile percentage names exactly way stats::quantile(), reveal certain combinations probs digits.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-1-0-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 1.0.0 [2023-06-01]","text":"useNames = NA now deprecated. Use useNames = TRUE useNames = FALSE instead.","code":""},{"path":"/news/index.html","id":"version-0630-2022-11-14","dir":"Changelog","previous_headings":"","what":"Version 0.63.0 [2022-11-14]","title":"Version 0.63.0 [2022-11-14]","text":"CRAN release: 2022-11-18","code":""},{"path":"/news/index.html","id":"miscellaneous-0-63-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"Version 0.63.0 [2022-11-14]","text":"Package compiles older compilers supporting C99 standard (e.g. GCC 4.8.5 (2015), default RHEL / CentOS 7.9). case also matrixStats (<= 0.54.0). Added information error message produced argument center col- rowVars() holds invalid value. Fix two compilation warnings function declaration without    prototype deprecated versions C    [-Wstrict-prototypes].","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-63-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.63.0 [2022-11-14]","text":"validateIndices() now defunct eventually removed package API.","code":""},{"path":"/news/index.html","id":"version-0620-2022-04-18","dir":"Changelog","previous_headings":"","what":"Version 0.62.0 [2022-04-18]","title":"Version 0.62.0 [2022-04-18]","text":"CRAN release: 2022-04-19","code":""},{"path":"/news/index.html","id":"new-features-0-62-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.62.0 [2022-04-18]","text":"colCummins(), colCummaxs(), rowCummins(), rowCummaxs() now support also logical input.","code":""},{"path":"/news/index.html","id":"miscellaneous-0-62-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"Version 0.62.0 [2022-04-18]","text":"Updated native code use C99 constant DBL_MAX instead legacy S constant DOUBLE_XMAX, planned unsupported R (>= 4.2.0).","code":""},{"path":"/news/index.html","id":"version-0610-2021-09-12","dir":"Changelog","previous_headings":"","what":"Version 0.61.0 [2021-09-12]","title":"Version 0.61.0 [2021-09-12]","text":"CRAN release: 2021-09-17","code":""},{"path":"/news/index.html","id":"new-features-0-61-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.61.0 [2021-09-12]","text":"argument colOrderStats() rowOrderStats() range, error message now reports value . Similarly, argument probs colQuantiles() rowQuantiles() range, error message reports value .","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-61-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.61.0 [2021-09-12]","text":"validateIndices() deprecated eventually removed package API.","code":""},{"path":"/news/index.html","id":"miscellaneous-0-61-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"Version 0.61.0 [2021-09-12]","text":"package test benchmark reports failed markdown package declared suggested package.","code":""},{"path":"/news/index.html","id":"version-0601-2021-08-22","dir":"Changelog","previous_headings":"","what":"Version 0.60.1 [2021-08-22]","title":"Version 0.60.1 [2021-08-22]","text":"CRAN release: 2021-08-23","code":""},{"path":"/news/index.html","id":"performance-0-60-1","dir":"Changelog","previous_headings":"","what":"Performance","title":"Version 0.60.1 [2021-08-22]","text":"Handling useNames argument now done native code. Passing idxs, rows, cols arguments type integer now less efficient used , new code re-design (see ) requires internal allocation equally long R_xlen_t vector populated indices coerced R_len_t R_xlen_t integers.","code":""},{"path":"/news/index.html","id":"code-design-0-60-1","dir":"Changelog","previous_headings":"","what":"Code Design","title":"Version 0.60.1 [2021-08-22]","text":"longer using native-code implementations specific type index passed subsetting vectors, rows, columns. done avoid complex use macros cumbersome maintain added extra threshold new contributors overcome. Another advantage faster compilation time built source smaller size compiled library. previous version R CMD check produce NOTE package installation size large, longer case. downside extra overhead passing integer indices (see comment).","code":""},{"path":"/news/index.html","id":"bug-fixes-0-60-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.60.1 [2021-08-22]","text":"Contrary functions gained new argument useNames =    NA previous release, colQuantiles() rowQuantiles() got useNames = TRUE.","code":""},{"path":"/news/index.html","id":"version-0600-2021-07-26","dir":"Changelog","previous_headings":"","what":"Version 0.60.0 [2021-07-26]","title":"Version 0.60.0 [2021-07-26]","text":"CRAN release: 2021-07-26","code":""},{"path":"/news/index.html","id":"new-features-0-60-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.60.0 [2021-07-26]","text":"Add row column names support row column functions. return row column names, set argument useNames =    TRUE. drop , set useNames = FALSE. preserve current, inconsistent behavior, set useNames = NA, , backward compatibility reasons, remains default now.","code":""},{"path":"/news/index.html","id":"version-0590-2021-05-31","dir":"Changelog","previous_headings":"","what":"Version 0.59.0 [2021-05-31]","title":"Version 0.59.0 [2021-05-31]","text":"CRAN release: 2021-06-01","code":""},{"path":"/news/index.html","id":"miscellaneous-0-59-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"Version 0.59.0 [2021-05-31]","text":"Harmonized error messages.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-59-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.59.0 [2021-05-31]","text":"examples package tests allocated matrices dimensions match number elements input data.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-59-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.59.0 [2021-05-31]","text":"Dropped meanOver() sumOver(), argument method weightedVar(), defunct since January 2018.","code":""},{"path":"/news/index.html","id":"version-0580-2021-01-26","dir":"Changelog","previous_headings":"","what":"Version 0.58.0 [2021-01-26]","title":"Version 0.58.0 [2021-01-26]","text":"CRAN release: 2021-01-29","code":""},{"path":"/news/index.html","id":"significant-changes-0-58-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.58.0 [2021-01-26]","text":"colVars() rowVars() argument center now calculates sample variance using n/(n-1)*avg((x-center)^2) formula rather n/(n-1)*(avg(x^2)-center^2) formula used past. give result center correct sample mean estimate. main reason change , incorrect center provided, contrast old approach, new approach guaranteed give least non-negative results, despite incorrect. BACKWARD COMPATIBILITY: 314 reverse dependencies CRAN Bioconductor, four called functions argument center. pass package checks also update. protect negative impact existing user scripts, colVars() rowVars() calculate versions assert result . , informative error produced. limit performance impact, validation run every 50:th call, frequency can controlled R option matrixStats.vars.formula.freq. Setting 0 NULL disable validation. default can also controlled environment variable R_MATRIXSTATS_VARS_FORMULA_FREQ. validation framework removed future version package established change negative impact.","code":""},{"path":"/news/index.html","id":"new-features-0-58-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.58.0 [2021-01-26]","text":"Now colWeightedMads() rowWeightedMads() accept center length number columns rows, respectively. colAvgsPerRowSet() rowAvgsPerRowSet() gained argument na.rm. Now weightedMean() weightedMedian() corresponding row- column-based functions accept logical x, FALSE treated integer 0 TRUE 1. Now x_OP_y() t_tx_OP_y() accept logical x y, FALSE treated integer 0 TRUE 1.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-58-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.58.0 [2021-01-26]","text":"colQuantiles() rowQuantiles() logical matrix return numeric vector type = 7. However, missing values (= NA) matrix, return “logical” vector instead. colAvgsPerRowSet() single-column matrix produce error non-matching dimensions. Analogously, rowAvgsPerRowSet() single- row matrices. colVars(x) rowVars(x) x array give wrong value argument dim. center specified. documentation unclear center argument . detect incorrect specification used, notably length center match matrix dimensions. Now functions give informative error message center incorrect length.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-58-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.58.0 [2021-01-26]","text":"Using scalar value argument center colSds(), rowSds(), colVars(), rowVars(), colMads(), rowMads(), colWeightedMads(), rowWeightedMads() now deprecated.","code":""},{"path":"/news/index.html","id":"version-0570-2020-09-25","dir":"Changelog","previous_headings":"","what":"Version 0.57.0 [2020-09-25]","title":"Version 0.57.0 [2020-09-25]","text":"CRAN release: 2020-09-25","code":""},{"path":"/news/index.html","id":"new-features-0-57-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.57.0 [2020-09-25]","text":"colCumprods() rowCumprods() now support also logical input. Thanks Constantin Ahlmann-Eltze EMBL Heidelberg patch.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-57-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.57.0 [2020-09-25]","text":"colCollapse() rowCollapse() expand idxs argument subsetting cols rows, respectively. Thanks Constantin Ahlmann-Eltze reporting . colAnys(), rowAnys(), anyValue(), colAlls(), rowAlls(), allValue() value=FALSE numeric input incorrectly consider values different one FALSE. Now values zero considered FALSE. Thanks Constantin Ahlmann-Eltze bug fix.","code":""},{"path":"/news/index.html","id":"version-0560-2020-03-12","dir":"Changelog","previous_headings":"","what":"Version 0.56.0 [2020-03-12]","title":"Version 0.56.0 [2020-03-12]","text":"CRAN release: 2020-03-13","code":""},{"path":"/news/index.html","id":"significant-changes-0-56-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.56.0 [2020-03-12]","text":"colQuantiles() rowQuantiles() now supports integer, numeric logical input. Previously, also possible pass, instance, character input, mistake. restriction input allows optimization functions. returned type colQuantiles() rowQuantiles() now stats::quantile(), depends argument type.","code":""},{"path":"/news/index.html","id":"performance-0-56-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"Version 0.56.0 [2020-03-12]","text":"colQuantiles() rowQuantiles() default type = 7L missing values now significantly faster use significantly fewer memory allocations.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-56-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.56.0 [2020-03-12]","text":"colDiffs() rowDiffs() gave error argument dim. type numeric rather type integer. varDiff(), sdDiff(), madDiff(), iqrDiff(), corresponding row- column functions silently treated diff less zero diff = 0. Now error produced. Error messages argument dim. referred non-existing argument dim. Error messages negative values argument dim. reported garbage value instead negative value. Markdown reports produced internal benchmark report generator add line tables following text (figure caption) causing following text included cell extra row table (least rendered GitHub Wiki pages).","code":""},{"path":"/news/index.html","id":"version-0550-2019-09-05","dir":"Changelog","previous_headings":"","what":"Version 0.55.0 [2019-09-05]","title":"Version 0.55.0 [2019-09-05]","text":"CRAN release: 2019-09-07","code":""},{"path":"/news/index.html","id":"significant-changes-0-55-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.55.0 [2019-09-05]","text":"weightedVar(), weightedSd(), weightedMad(), row- column- specific counter parts now return missing value missing values weights w possibly dropping (x, w) elements missing values x (na.rm =    TRUE). Previously, na.rm = TRUE also drop (x, w) elements w missing. change, now functions package, na.rm = TRUE never applies weights - x values.","code":""},{"path":"/news/index.html","id":"new-features-0-55-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.55.0 [2019-09-05]","text":"colRanks() rowRanks() now supports set ties.method base::rank() plus \"dense\" defined data.table::frank(). backward compatible reasons, default ties.method remains previous versions. Thank Brian Montgomery contributing . colCumsums() rowCumsums() now support also logical input.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-55-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.55.0 [2019-09-05]","text":"weightedVar(), weightedSd(), weightedMad(), row- column- specific counter parts produce error instead returning missing value one weights missing value.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-55-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.55.0 [2019-09-05]","text":"Calling indexByRow(x) x matrix now defunct. Use indexByRow(dim(x)) instead.","code":""},{"path":"/news/index.html","id":"version-0540-2018-07-23","dir":"Changelog","previous_headings":"","what":"Version 0.54.0 [2018-07-23]","title":"Version 0.54.0 [2018-07-23]","text":"CRAN release: 2018-07-23","code":""},{"path":"/news/index.html","id":"performance-0-54-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"Version 0.54.0 [2018-07-23]","text":"SPEEDUP: longer using stopifnot() internal validation, comes great overhead. used weightedMad(), col-, rowWeightedMads(), well col- rowAvgsPerColSet().","code":""},{"path":"/news/index.html","id":"bug-fixes-0-54-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.54.0 [2018-07-23]","text":"Despite unlikely use case, colLogSumExps(lx) / rowLogSumExps(lx) now also accepts integer lx values. error produced using indexByRow(dim) prod(dim) >=    2^31 report garbage dimensions instead dim.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-54-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.54.0 [2018-07-23]","text":"Calling indexByRow(x), x matrix, deprecated. Use indexByRow(dim(x)) instead.","code":""},{"path":"/news/index.html","id":"version-0531-2018-02-10","dir":"Changelog","previous_headings":"","what":"Version 0.53.1 [2018-02-10]","title":"Version 0.53.1 [2018-02-10]","text":"CRAN release: 2018-02-11","code":""},{"path":"/news/index.html","id":"code-refactoring-0-53-1","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.53.1 [2018-02-10]","text":"Now col-/rowSds() explicitly replicate arguments passed col-/rowVars().","code":""},{"path":"/news/index.html","id":"documentation-0-53-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.53.1 [2018-02-10]","text":"Added details weightedMedian(x, interpolate = TRUE) works.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-53-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.53.1 [2018-02-10]","text":"colLogSumExps(lx, cols) / rowLogSumExps(lx, rows) gave error lx rownames / colnames. col-/rowQuantiles() lose rownames output certain cases.","code":""},{"path":"/news/index.html","id":"version-0530-2018-01-23","dir":"Changelog","previous_headings":"","what":"Version 0.53.0 [2018-01-23]","title":"Version 0.53.0 [2018-01-23]","text":"CRAN release: 2018-01-24","code":""},{"path":"/news/index.html","id":"new-features-0-53-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.53.0 [2018-01-23]","text":"Functions sum2(x) means2(x) now accept also logical input x, corresponds using .integer(x) without need neither coercion internal extra copies. sum2(x, mode =    \"double\") possible count number TRUE elements beyond 2^31-1, base::sum() support. Functions col-/rowSums2() col-/rowMeans2() now accept also logical input x. Function binMeans(y, x, bx) now accepts logical y, corresponds using .integer(y), without need coercion integer. Functions col-/rowTabulates(x) now support logical input x. Now count() can count beyond 2^31-1. allocVector() can now allocate long vectors (longer 2^31-1). Now sum2(x, mode = \"integer\") generates warning typeof(x)    == \"double\" asking .integer(sum2(x)) intended. Inspired Hmisc::wtd.var(), sum(w) <= 1, weightedVar(x,    w) now produces informative warning estimate invalid.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-53-0","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.53.0 [2018-01-23]","text":"Harmonized ordering arguments colAvgsPerColSet() rowAvgsPerColSet().","code":""},{"path":"/news/index.html","id":"bug-fixes-0-53-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.53.0 [2018-01-23]","text":"col-/rowLogSumExp() core dump R “large” number columns/rows. Thanks Brandon Stewart Princeton University reporting . count() beyond 2^31-1 return invalid results. Functions col-/rowTabulates(x) count missing values. indexByRow(dim, idxs) give nonsense results idxs indices greater prod(dim) non-positive indices; now gives error. indexByRow(dim) give nonsense results prod(dim) >=    2^31; now gives informative error. col-/rowAvgsPerColSet() return vector rather matrix nrow(X) <= 1. Thanks Peter Hickey (Johns Hopkins University) troubleshooting providing fix.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-53-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.53.0 [2018-01-23]","text":"Previously deprecated meanOver() sumOver() defunct. Use mean2() sum2() instead. Previously deprecated weightedVar(x, w, method = \"0.14.2\") defunct. Dropped previously defunct weightedMedian(..., ties = \"\"). Dropped previously defunct argument centers col-/rowMads(). Use center instead. Dropped previously defunct argument flavor colRanks() rowRanks().","code":""},{"path":"/news/index.html","id":"version-0522-2017-04-13","dir":"Changelog","previous_headings":"","what":"Version 0.52.2 [2017-04-13]","title":"Version 0.52.2 [2017-04-13]","text":"CRAN release: 2017-04-14","code":""},{"path":"/news/index.html","id":"bug-fixes-0-52-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.52.2 [2017-04-13]","text":"Several row- column-based functions core dump R matrix data type logical, integer, numeric, e.g. character complex. now detected informative error produced instead. Similarly, vector-based functions potentially core dump R silently return nonsense result. Thank Hervé Pagès, Bioconductor Core, report.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-52-2","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.52.2 [2017-04-13]","text":"rowVars(..., method = \"0.14.2\") added unlikely needs backward compatibility invalid degree--freedom term deprecated.","code":""},{"path":"/news/index.html","id":"version-0521-2017-04-04","dir":"Changelog","previous_headings":"","what":"Version 0.52.1 [2017-04-04]","title":"Version 0.52.1 [2017-04-04]","text":"CRAN release: 2017-04-04","code":""},{"path":"/news/index.html","id":"bug-fixes-0-52-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.52.1 [2017-04-04]","text":"package test matrixStats:::benchmark() tried run even suggested packages available.","code":""},{"path":"/news/index.html","id":"version-0520-2017-04-03","dir":"Changelog","previous_headings":"","what":"Version 0.52.0 [2017-04-03]","title":"Version 0.52.0 [2017-04-03]","text":"CRAN release: 2017-04-04","code":""},{"path":"/news/index.html","id":"significant-changes-0-52-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.52.0 [2017-04-03]","text":"Since anyNA() built-function since R (>= 3.1.0), please use instead anyMissing() part package. latter eventually deprecated. consistency anyNA() name, colAnyNAs() rowAnyNAs() now also available replacing identically colAnyMissings() rowAnyMissings() functions, also deprecated future release. meanOver() renamed mean2() sumOver() renamed sum2().","code":""},{"path":"/news/index.html","id":"new-features-0-52-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.52.0 [2017-04-03]","text":"Added colSums2() rowSums2() work like colSums() rowSums() base package also supports efficient subsetting via optional arguments rows cols. Added colMeans2() rowMeans2() work like colMeans() rowMeans() base package also supports efficient subsetting via optional arguments rows cols. Functions colDiffs() rowDiffs() gained argument dim.. Functions colWeightedMads() rowWeightedMads() gained arguments constant center. current implementation support scalars arguments, means values applied columns rows, respectively. previous version hard--understand error produced center length greater one; now informative error message given. Package now silent loaded; longer displays startup message.","code":""},{"path":"/news/index.html","id":"software-quality-0-52-0","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.52.0 [2017-04-03]","text":"Continuous-integration testing now also done macOS, addition Linux Windows. ROBUSTNESS: Package now registers native API using also R_useDynamicSymbols().","code":""},{"path":"/news/index.html","id":"code-refactoring-0-52-0","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.52.0 [2017-04-03]","text":"Cleaned native low-level API renamed native source code files make easier navigate native API. Now using roxygen2 help NAMESPACE (R.oo::Rdoc).","code":""},{"path":"/news/index.html","id":"bug-fixes-0-52-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.52.0 [2017-04-03]","text":"rowAnys(x) numeric matrices x return rowAnys(x == 1) rowAnys(x != 0). colAnys(), rowAlls(), colAlls(). Thanks Richard Cotton reporting . sumOver(x) meanOver(x) incorrectly return -Inf +Inf intermediate sum value, even one following elements turn intermediate sum NaN NA, e.g. x c(-Inf, NaN), c(-Inf, +Inf), c(+Inf, NA). WORKAROUND: Benchmark reports generated matrixStats:::benchmark() use custom R prompt currently set R session, may render well. Now forces prompt built-\"> \" one.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-52-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.52.0 [2017-04-03]","text":"package API intended matrices vectors type numeric, integer logical. However, functions still return called data.frame. never intended work now error. Specifically, functions colAlls(), colAnys(), colProds(), colQuantiles(), colIQRs(), colWeightedMeans(), colWeightedMedians(), colCollapse() now produce warnings called data.frame. corresponding row- functions. use `data.frame produce error future releases. meanOver() sumOver() deprecated renamed mean2() sum2(), respectively. Previously deprecated (ignored) argument flavor colRanks() rowRanks() now defunct. Previously deprecated support passing non-vector, non-matrix objects rowAlls(), rowAnys(), rowCollapse(), corresponding column-based versions now defunct. Likewise, rowProds(), rowQuantiles(), rowWeightedMeans(), rowWeightedMedians(), corresponding column-based versions also defunct. rationale tighten identity matrixStats package types input accepts. also help optimize code .","code":""},{"path":"/news/index.html","id":"version-0510-2016-10-08","dir":"Changelog","previous_headings":"","what":"Version 0.51.0 [2016-10-08]","title":"Version 0.51.0 [2016-10-08]","text":"CRAN release: 2016-10-09","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-51-0","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.51.0 [2016-10-08]","text":"SPEEDUP / CLEANUP: rowMedians() colMedians() now plain functions. previously S4 methods (due Bioconductor legacy). package longer imports methods package. SPEEDUP: Now native API formally registered allowing faster lookup routines R.","code":""},{"path":"/news/index.html","id":"version-0502-2016-04-24","dir":"Changelog","previous_headings":"","what":"Version 0.50.2 [2016-04-24]","title":"Version 0.50.2 [2016-04-24]","text":"CRAN release: 2016-04-24","code":""},{"path":"/news/index.html","id":"bug-fixes-0-50-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.50.2 [2016-04-24]","text":"Package now installs R (>= 2.12.0) claimed. Thanks Mikko Korpela Aalto University School Science, Finland, troubleshooting providing fix. logSumExp(c(-Inf, -Inf, ...)) return NaN rather -Inf. Thanks Jason Xu (University Washington) reporting Brennan Vincent troubleshooting contributing fix.","code":""},{"path":"/news/index.html","id":"version-0501-2015-12-14","dir":"Changelog","previous_headings":"","what":"Version 0.50.1 [2015-12-14]","title":"Version 0.50.1 [2015-12-14]","text":"CRAN release: 2015-12-15","code":""},{"path":"/news/index.html","id":"bug-fixes-0-50-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.50.1 [2015-12-14]","text":"Undefined Behavior Sanitizer (UBsan) reported memcall(src, dest, 0) call dest == null. Thanks Brian Ripley CRAN check tools catching . reproduce gcc 5.1.1 gcc 4.9.2.","code":""},{"path":"/news/index.html","id":"version-0500-2015-12-13","dir":"Changelog","previous_headings":"","what":"Version 0.50.0 [2015-12-13]","title":"Version 0.50.0 [2015-12-13]","text":"CRAN release: 2015-12-13","code":""},{"path":"/news/index.html","id":"new-features-0-50-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.50.0 [2015-12-13]","text":"MAJOR FEATURE UPDATE: Subsetting arguments idxs, rows cols added functions calculations performed requested subset avoiding creating subsetted copy, .e. rowVars(x, cols = 4:6) much faster memory efficient version rowVars(x[, 4:6]) even yet efficient apply(x, MARGIN = 1L, FUN = var). features added Dongcan Jiang, Peking University, support Google Summer Code program. great thank Dongcan Google making possible.","code":""},{"path":"/news/index.html","id":"version-0150-2015-10-26","dir":"Changelog","previous_headings":"","what":"Version 0.15.0 [2015-10-26]","title":"Version 0.15.0 [2015-10-26]","text":"CRAN release: 2015-10-27","code":""},{"path":"/news/index.html","id":"new-features-0-15-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.15.0 [2015-10-26]","text":"CONSISTENCY: Now weight arguments (w W) default NULL, corresponds uniform weights.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-15-0","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.15.0 [2015-10-26]","text":"ROBUSTNESS: Importing stats functions namespace.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-15-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.15.0 [2015-10-26]","text":"weightedVar(x, w) used wrong bias correction factor resulting estimate tau large, tau = ((sum(w) - 1) /    sum(w)) / ((length(w) - 1) / length(w)). Thanks Wolfgang Abele reporting troubleshooting . weightedVar(x) length(x) = 1 returned 0 - NA. weightedSd(). weightedMedian(x, w = NA_real_) returned x rather NA_real_. happened length(w) = 1. allocArray(dim) failed prod(dim) >= .Machine$integer.max.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-15-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.15.0 [2015-10-26]","text":"CLEANUP: Defunct argument centers col-/rowMads(); use center. weightedVar(x, w, method = \"0.14.2\") deprecated.","code":""},{"path":"/news/index.html","id":"version-0142-2015-06-23","dir":"Changelog","previous_headings":"","what":"Version 0.14.2 [2015-06-23]","title":"Version 0.14.2 [2015-06-23]","text":"CRAN release: 2015-06-24","code":""},{"path":"/news/index.html","id":"bug-fixes-0-14-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.14.2 [2015-06-23]","text":"x_OP_y() t_tx_OP_y() return garbage Solaris SPARC (possibly architectures well) input integer missing values.","code":""},{"path":"/news/index.html","id":"version-0141-2015-06-17","dir":"Changelog","previous_headings":"","what":"Version 0.14.1 [2015-06-17]","title":"Version 0.14.1 [2015-06-17]","text":"CRAN release: 2015-06-20","code":""},{"path":"/news/index.html","id":"bug-fixes-0-14-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.14.1 [2015-06-17]","text":"product(x, na.rm = FALSE) integer x zeros NAs returned zero rather NA. weightedMean(x, w, na.rm = TRUE) handle missing values x properly, integer. also return NaN weights w missing values, whereas stats::weighted.mean() skip data points. Now weightedMean() . (col|row)WeightedMedians() handle infinite weights weightedMedian() . x_OP_y(x, y, OP, na.rm = FALSE) returned garbage iff x y missing values type integer. rowQuantiles() rowIQRs() work single-row matrices. Analogously corresponding column functions. rowCumsums(), rowCumprods() rowCummins(), rowCummaxs(), accessed --bound elements Nx0 matrices N > 0. corresponding column methods similar memory errors 0xK matrices K > 0. anyMissing(list(NULL)) returned NULL; now FALSE. rowCounts() resulted garbage previous column NAs (forgot update index kk cases). rowCumprods(x) handled missing values zeros incorrectly integer x (double); zero trump existing missing value causing following cumulative products become zero. zero trumped NAs; integer work expected. Note, bug colCumprods(). rowAnys(x, value, na.rm = FALSE) handle missing values numeric x properly. Similarly, non-numeric non-logical x, row- colAnys(), row- colAlls(), anyValue() allValue() handle value missing value. bugs identified fixed Dongcan Jiang (Peking University, China), also added corresponding unit tests.","code":""},{"path":"/news/index.html","id":"version-0140-2015-02-13","dir":"Changelog","previous_headings":"","what":"Version 0.14.0 [2015-02-13]","title":"Version 0.14.0 [2015-02-13]","text":"CRAN release: 2015-02-14","code":""},{"path":"/news/index.html","id":"significant-changes-0-14-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.14.0 [2015-02-13]","text":"CLEANUP: anyMissing() longer S4 generic. done part migration making functions matrixStats plain R functions, minimizes calling overhead also allow us drop methods package dependencies. ’ve scanned CRAN Bioconductor packages depending matrixStats none relied anyMissing() dispatching class, hopefully move little impact. remaining S4 methods now colMedians() rowMedians().","code":""},{"path":"/news/index.html","id":"new-features-0-14-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.14.0 [2015-02-13]","text":"CONSISTENCY: Renamed argument centers col-/rowMads() center. consistent col-/rowVars(). CONSISTENCY: col-/rowVars() now use na.rm = FALSE default (na.rm = TRUE mistakenly introduced default v0.9.7).","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-14-0","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.14.0 [2015-02-13]","text":"SPEEDUP: check user interrupts C level now done less frequently functions. every k:th iteration, k = 2^20, tested using (iter % k == 0). turns , least default compiler optimization settings use, test 3 times faster k = 2^n n integer. following functions checks user interrupts: logSumExp(), (col|row)LogSumExps(), (col|row)Medians(), (col|row)Mads(), (col|row)Vars(), (col|row)Cum(Min|Max|prod|sum)s(). SPEEDUP: logSumExp(x) now faster x contain missing values. also faster values missing maximum value +Inf - cases can skip actual summation step.","code":""},{"path":"/news/index.html","id":"software-quality-0-14-0","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.14.0 [2015-02-13]","text":"ROBUSTNESS/TESTS: Package tests cover 96% code (91%).","code":""},{"path":"/news/index.html","id":"code-refactoring-0-14-0","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.14.0 [2015-02-13]","text":"CLEANUP: Package longer depends R.methodsS3.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-14-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.14.0 [2015-02-13]","text":"() () flavored methods non-numeric non-logical (e.g. character) vectors matrices na.rm = FALSE give results consistent () () missing values. example, x <- c(\"\", NA, \"b\") (x == \"\") == FALSE (x == \"\") == TRUE, whereas corresponding methods return NA cases. methods fixed allValue(), anyValue(), col-/rowAlls(), col-/rowAnys(). Added package tests cover cases. logSumExp(x, na.rm = TRUE) return NA values NA length(x) > 1. Now returns -Inf length(x):s.","code":""},{"path":"/news/index.html","id":"version-0131-2015-01-21","dir":"Changelog","previous_headings":"","what":"Version 0.13.1 [2015-01-21]","title":"Version 0.13.1 [2015-01-21]","text":"CRAN release: 2015-01-22","code":""},{"path":"/news/index.html","id":"bug-fixes-0-13-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.13.1 [2015-01-21]","text":"diff2() differences >= 3 read spurious values beyond allocated memory. error, introduced 0.13.0, harmless sense returned value unaffected still correct. Thanks Brian Ripley CRAN check tools catching . reproduce locally valgrind.","code":""},{"path":"/news/index.html","id":"version-0130-2015-01-20","dir":"Changelog","previous_headings":"","what":"Version 0.13.0 [2015-01-20]","title":"Version 0.13.0 [2015-01-20]","text":"CRAN release: 2015-01-21","code":""},{"path":"/news/index.html","id":"significant-changes-0-13-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.13.0 [2015-01-20]","text":"SPEEDUP/CLEANUP: Turned several S3 S4 methods plain R functions, decreases overhead calling functions. longer S3 methods. Remaining S4 methods anyMissing() rowMedians().","code":""},{"path":"/news/index.html","id":"new-features-0-13-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.13.0 [2015-01-20]","text":"Added weightedMean(), ~10 times faster stats::weighted.mean(). Added count(x, value) notably faster sum(x ==    value). can also used count missing values etc. Added allValue() anyValue() (x == value) (x == value). Added diff2(), notably faster base::diff() vectors, designed . Added iqrDiff() (col|row)IqrDiffs(). CONSISTENCY: Now rowQuantiles(x, na.rm = TRUE) returns NAs rows missing values. Analogously colQuantiles(), colIQRs(), rowIQRs() iqr(). Previously, functions gave error saying missing values allowed. COMPLETENESS: Added corresponding “missing” vector functions already existing column row functions. Similarly, added “missing” column row functions already existing vector functions, e.g. added iqr() count() complement already existing (col|row)IQRs() (col|row)Counts() functions. ROBUSTNESS: Now column row methods give slightly informative error messages data.frame passed instead matrix.","code":""},{"path":"/news/index.html","id":"documentation-0-13-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.13.0 [2015-01-20]","text":"Added vignette summarizing available functions.","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-13-0","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.13.0 [2015-01-20]","text":"SPEEDUP: (col|row)Diffs() now implemented native code notably faster diff() matrices. SPEEDUP: Made binCounts() binMeans() bit faster. SPEEDUP: Implemented weightedMedian() native code, made ~3-10 times faster. Dropped support ties = \"\", return two values case ties, made API unnecessarily complicated. really needed, call function twice ties = \"min\" ties = \"max\". SPEEDUP: (col|row)Anys() (col|row)Alls() now notably faster compared previous versions.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-13-0","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.13.0 [2015-01-20]","text":"CLEANUP: effort migrating anyMissing() plain R function, specific anyMissing() implementations data.frame:s list:s dropped now handled anyMissing() \"\", S4 method remaining now. near future release, remaining \"\" method turned plain R function current S4 generic dropped. know CRAN Bioconductor packages rely generic function. Note also since R (>= 3.1.0) base::anyNA() function exact thing making anyMissing() obsolete.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-13-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.13.0 [2015-01-20]","text":"weightedMedian(..., ties = \"\") give error tie. Added package test case.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-13-0","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.13.0 [2015-01-20]","text":"weightedMedian(..., ties = \"\") now defunct.","code":""},{"path":"/news/index.html","id":"version-0122-2014-12-07","dir":"Changelog","previous_headings":"","what":"Version 0.12.2 [2014-12-07]","title":"Version 0.12.2 [2014-12-07]","text":"CRAN release: 2014-12-07","code":""},{"path":"/news/index.html","id":"bug-fixes-0-12-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.12.2 [2014-12-07]","text":"CODE FIX: native code product() integer vector incorrectly used C-level abs() intermediate values despite doubles requiring fabs(). Despite , calculated product still correct (least validated several local setups well CRAN servers). , thanks Brian Ripley pointing another invalid integer-double coercion C level.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-12-2","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.12.2 [2014-12-07]","text":"weightedMedian(..., interpolate = FALSE, ties = \"\") defunct.","code":""},{"path":[]},{"path":"/news/index.html","id":"software-quality-0-12-1","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.12.1 [2014-12-06]","text":"ROBUSTNESS: Updated package tests check methods scenarios, especially integer numeric input data.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-12-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.12.1 [2014-12-06]","text":"(col|row)Cumsums(x) x integer return garbage columns (rows) containing missing values. rowMads(x) x numeric (integer) give incorrect results rows odd number values (ties). Analogously issues colMads(). Added package tests cases . Thanks Brian Ripley CRAN check tools (yet ) catching another coding mistake. Details: C-level calculation absolute value residuals toward median use integer-based abs() rather double-based fabs(). Now fabs() used values double abs() integers.","code":""},{"path":"/news/index.html","id":"version-0120-2014-12-05","dir":"Changelog","previous_headings":"","what":"Version 0.12.0 [2014-12-05]","title":"Version 0.12.0 [2014-12-05]","text":"CRAN release: 2014-12-06 Submitted CRAN.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-11-9","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.11.9 [2014-11-26]","text":"Added (col|row)Cumsums(), (col|row)Cumprods(), (col|row)Cummins(), (col|row)Cummaxs().","code":""},{"path":"/news/index.html","id":"bug-fixes-0-11-9","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.11.9 [2014-11-26]","text":"(col|row)WeightedMeans() zero weights gave mean estimates values 0 instead NaN.","code":""},{"path":[]},{"path":"/news/index.html","id":"performance-and-memory-0-11-8","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.11.8 [2014-11-25]","text":"SPEEDUP: Implemented (col|row)Mads(), (col|row)Sds(), (col|row)Vars() native code. SPEEDUP: Made (col|row)Quantiles(x) faster x without missing values (default type = 7L quantiles). still implemented native code though. SPEEDUP: Made rowWeightedMeans() faster.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-11-8","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.11.8 [2014-11-25]","text":"(col|row)Medians(x) x integer give invalid median values case () calculated mean two values (“ties”), (b) sum values greater .Machine$integer.max. Now ties calculated using floating point precision. Add lots package tests.","code":""},{"path":[]},{"path":"/news/index.html","id":"performance-and-memory-0-11-6","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.11.6 [2014-11-16]","text":"SPEEDUP: Now (col|row)Mins(), (col|row)Maxs(), (col|row)Ranges() implemented native code providing significant speedup. SPEEDUP: Now colOrderStats() also implemented native code, indirectly makes colMins(), colMaxs() colRanges() faster. SPEEDUP: colTabulates(x) longer uses rowTabulates(t(x)). SPEEDUP: colQuantiles(x) longer uses rowQuantiles(t(x)).","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-11-6","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.11.6 [2014-11-16]","text":"CLEANUP: Argument flavor (col|row)Ranks() now ignored.","code":""},{"path":[]},{"path":"/news/index.html","id":"significant-changes-0-11-5","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.11.5 [2014-11-15]","text":"(col|row)Prods() now uses default method = \"direct\" (\"expSumLog\").","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-11-5","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.11.5 [2014-11-15]","text":"SPEEDUP: Now colCollapse(x) longer utilizes rowCollapse(t(x)). Added package tests (col|row)Collapse(). SPEEDUP: Now colDiffs(x) longer uses rowDiffs(t(x)). Added package tests (col|row)Diffs(). SPEEDUP: Package longer utilizes match.arg() due overhead; methods sumOver(), (col|row)Prods() (col|row)Ranks() updated.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-11-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.11.4 [2014-11-14]","text":"Added support vector input several row- column methods long “intended” matrix dimension specified via argument dim. instance, rowCounts(x, dim = c(nrow, ncol)) rowCounts(matrix(x, nrow, ncol)), efficient since avoids creating/allocating temporary matrix.","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-11-4","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.11.4 [2014-11-14]","text":"SPEEDUP: Now colCounts() implemented native code. Moreover, (col|row)Counts() now also implemented native code logical input (previously integer double input). Added package tests benchmarks functions.","code":""},{"path":[]},{"path":"/news/index.html","id":"significant-changes-0-11-3","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.11.3 [2014-11-11]","text":"Turned sdDiff(), madDiff(), varDiff(), weightedSd(), weightedVar() weightedMad() plain functions (generic functions).","code":""},{"path":"/news/index.html","id":"code-refactoring-0-11-3","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.11.3 [2014-11-11]","text":"Removed unnecessary usage ::.","code":""},{"path":[]},{"path":"/news/index.html","id":"significant-changes-0-11-2","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.11.2 [2014-11-09]","text":"SPEEDUP: Implemented indexByRow() native code longer generic function, regular function, also faster call. first argument indexByRow() changed dim one use indexByRow(dim(X)) instead indexByRow(X) past. latter form still supported, deprecated.","code":""},{"path":"/news/index.html","id":"new-features-0-11-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.11.2 [2014-11-09]","text":"Added allocVector(), allocMatrix(), allocArray() faster allocation numeric vectors, matrices arrays, particularly filled non-missing values.","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-0-11-2","dir":"Changelog","previous_headings":"","what":"Deprecated and Defunct","title":"Version 0.11.2 [2014-11-09]","text":"Calling indexByRow(X) matrix X deprecatated. Instead call indexByRow(dim(X)).","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-11-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.11.1 [2014-11-07]","text":"Better support long vectors. PRECISION: Using greater floating-point precision internal intermediate calculations, possible.","code":""},{"path":"/news/index.html","id":"software-quality-0-11-1","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.11.1 [2014-11-07]","text":"ROBUSTNESS: Although unlikely, long vectors support binCounts() binMeans() possible bin gets higher count can represented R integer (.Machine$integer.max = 2^31-1). happens, informative warning generated bin count set .Machine$integer.max. happens binMeans(), corresponding mean still properly calculated valid.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-11-1","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.11.1 [2014-11-07]","text":"CLEANUP: Cleanup harmonized internal C API two well defined API levels. high-level API called R via .Call() takes care argument validation construction return value. function dispatch functions low-level API based data type(s) arguments. low-level API written work basic C data types .","code":""},{"path":"/news/index.html","id":"bug-fixes-0-11-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.11.1 [2014-11-07]","text":"Package incorrectly redefined R_xlen_t R (>= 3.0.0) systems LONG_VECTOR_SUPPORT supported.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.11.0 [2014-11-02]","text":"Added sumOver() meanOver(), notably faster versions sum(x[idxs]) mean(x[idxs]). Moreover, instead sum(.numeric(x)) avoid integer overflow x integer vector, one can sumOver(x, mode =    \"numeric\"), avoids extra copy created coercing numeric (numeric copy also twice large integer vector). Added package tests benchmark reports functions.","code":""},{"path":[]},{"path":"/news/index.html","id":"performance-and-memory-0-10-4","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.10.4 [2014-11-01]","text":"SPEEDUP: Made anyMissing(), logSumExp(), (col|row)Medians(), (col|row)Counts() slightly faster making native code assign results directly native vector instead R vector, e.g. ansp[] = v ansp = REAL(ans) instead REAL(ans)[] = v. Added benchmark reports anyMissing() logSumExp().","code":""},{"path":"/news/index.html","id":"version-0103-2014-10-01","dir":"Changelog","previous_headings":"","what":"Version 0.10.3 [2014-10-01]","title":"Version 0.10.3 [2014-10-01]","text":"CRAN release: 2014-10-15","code":""},{"path":"/news/index.html","id":"bug-fixes-0-10-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.10.3 [2014-10-01]","text":"binMeans() returned 0.0 instead NA_real_ empty bins.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-10-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.10.2 [2014-09-01]","text":"systems, package failed build R (<= 2.15.3) compilation error: \"redefinition typedef 'R_xlen_t'\".","code":""},{"path":[]},{"path":"/news/index.html","id":"performance-and-memory-0-10-1","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.10.1 [2014-06-09]","text":"Added benchmark reports also non-matrixStats functions col-/rowSums() col-/rowMeans(). Now colNnn() rowNnn() methods benchmarked combined report making possible also compare colNnn(x) rowNnn(t(x)).","code":""},{"path":"/news/index.html","id":"version-0100-2014-06-07","dir":"Changelog","previous_headings":"","what":"Version 0.10.0 [2014-06-07]","title":"Version 0.10.0 [2014-06-07]","text":"CRAN release: 2014-06-08","code":""},{"path":"/news/index.html","id":"software-quality-0-10-0","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.10.0 [2014-06-07]","text":"Relaxed packages tests assert numerical correctness via .equal() rather identical(). Submitted CRAN.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.10.0 [2014-06-07]","text":"package tests product() incorrectly assumed value prod(c(NaN, NA)) uniquely defined. However, documented help(\".nan\"), may NA NaN depending R system/platform.","code":""},{"path":"/news/index.html","id":"version-097-2014-06-05","dir":"Changelog","previous_headings":"","what":"Version 0.9.7 [2014-06-05]","title":"Version 0.9.7 [2014-06-05]","text":"CRAN release: 2014-06-06","code":""},{"path":"/news/index.html","id":"bug-fixes-0-9-7","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.9.7 [2014-06-05]","text":"Introduced bug v0.9.5 causing col-/rowVars() hence also col-/rowSds() return garbage. Add package tests now. Submitted CRAN.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-9-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.9.6 [2014-06-04]","text":"Added signTabulate() tabulating number negatives, zeros, positives missing values. doubles, number negative positive infinite values also counted.","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-9-6","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.9.6 [2014-06-04]","text":"SPEEDUP: Now col-/rowProds() utilizes new product() function. SPEEDUP: Added product() calculating product numeric vector via logarithm.","code":""},{"path":[]},{"path":"/news/index.html","id":"significant-changes-0-9-5","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.9.5 [2014-06-04]","text":"SPEEDUP: Made weightedMedian() plain function (S3 method). CLEANUP: Now exporting plain functions generic functions. SPEEDUP: Turned S4 methods S3 methods, e.g. rowCounts(), rowAlls(), rowAnys(), rowTabulates() rowCollapse().","code":""},{"path":"/news/index.html","id":"new-features-0-9-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.9.5 [2014-06-04]","text":"Added argument method col-/rowProds() controlling product calculated.","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-9-5","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.9.5 [2014-06-04]","text":"SPEEDUP: Package now byte compiled. SPEEDUP: Made rowProds() rowTabulates() notably faster. SPEEDUP: Now rowCounts(), rowAnys(), rowAlls() corresponding column methods can search value addition default TRUE. search matching integer double value done native code, notably faster (memory efficient avoids creating new objects). SPEEDUP: Made colVars() colSds() notably faster rowVars() rowSds() slightly bit faster. Added benchmark reports, e.g. matrixStats:::benchmark(\"colMins\").","code":""},{"path":[]},{"path":"/news/index.html","id":"significant-changes-0-9-4","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.9.4 [2014-05-23]","text":"SPEEDUP: Turned several S4 methods S3 methods, e.g. indexByRow(), madDiff(), sdDiff() varDiff().","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-9-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.9.3 [2014-04-26]","text":"Added argument trim madDiff(), sdDiff() varDiff().","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-9-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.9.2 [2014-04-04]","text":"native code binMeans(x, bx) try access --bounds value argument y iff x contained elements left bins bx. bug impact results since assignment done also crash/core dump R. discovered thanks new memtests (ASAN valgrind) provided CRAN.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-9-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.9.1 [2014-03-31]","text":"rowProds() throw \"Error rowSums(isNeg) :xmust    array least two dimensions\" matrices rows contained least one zero. Thanks Roel Verbelen KU Leuven report.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.9.0 [2014-03-26]","text":"Added weighedVar() weightedSd().","code":""},{"path":"/news/index.html","id":"version-0814-2013-11-23","dir":"Changelog","previous_headings":"","what":"Version 0.8.14 [2013-11-23]","title":"Version 0.8.14 [2013-11-23]","text":"CRAN release: 2014-01-05","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-8-14","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.8.14 [2013-11-23]","text":"MEMORY: Updated functions better job cleaning temporarily allocated objects soon possible garbage collector can remove sooner, iff wanted. increase chance smaller memory footprint. Submitted CRAN.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-8-13","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.8.13 [2013-10-08]","text":"Added argument right binCounts() binMeans() specify whether binning done (u,v] [u,v). Added system tests validating correctness two cases.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-8-13","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.8.13 [2013-10-08]","text":"Bumped package dependencies.","code":""},{"path":"/news/index.html","id":"version-0812-2013-09-26","dir":"Changelog","previous_headings":"","what":"Version 0.8.12 [2013-09-26]","title":"Version 0.8.12 [2013-09-26]","text":"CRAN release: 2013-09-27","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-8-12","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.8.12 [2013-09-26]","text":"SPEEDUP: Now utilizing anyMissing() everywhere possible.","code":""},{"path":[]},{"path":"/news/index.html","id":"software-quality-0-8-11","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.8.11 [2013-09-21]","text":"ROBUSTNESS: Now importing loadMethod methods package matrixStats S4-based methods also work methods loaded, e.g. Rscript used, cf. Section ‘Default packages’ ‘R Installation Administration’. ROBUSTNESS: Updates package system tests can run base package loaded.","code":""},{"path":"/news/index.html","id":"version-0810-2013-09-15","dir":"Changelog","previous_headings":"","what":"Version 0.8.10 [2013-09-15]","title":"Version 0.8.10 [2013-09-15]","text":"CRAN release: 2013-09-16","code":""},{"path":"/news/index.html","id":"code-refactoring-0-8-10","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.8.10 [2013-09-15]","text":"CLEANUP: Now importing two functions methods package. Bumped package dependencies.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-8-9","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.8.9 [2013-08-29]","text":"CLEANUP: Now package startup message acknowledges argument quietly library()/require().","code":""},{"path":[]},{"path":"/news/index.html","id":"documentation-0-8-8","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.8.8 [2013-07-29]","text":"dimension return value swapped help(\"rowQuantiles\").","code":""},{"path":[]},{"path":"/news/index.html","id":"performance-and-memory-0-8-7","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.8.7 [2013-07-28]","text":"SPEEDUP: Made (col|row)Mins() (col|row)Maxs() much faster.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-8-7","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.8.7 [2013-07-28]","text":"rowRanges(x) Nx0 matrix give error. colRanges(x) 0xN matrix. Added system tests special cases.","code":""},{"path":[]},{"path":"/news/index.html","id":"code-refactoring-0-8-6","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.8.6 [2013-07-20]","text":"Bumped package dependencies.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-8-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.8.6 [2013-07-20]","text":"Forgot declare S3 methods (col|row)WeightedMedians().","code":""},{"path":"/news/index.html","id":"version-085-2013-05-25","dir":"Changelog","previous_headings":"","what":"Version 0.8.5 [2013-05-25]","title":"Version 0.8.5 [2013-05-25]","text":"CRAN release: 2013-07-15","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-8-5","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.8.5 [2013-05-25]","text":"Minor speedup (col|row)Tabulates() replacing rm() calls NULL assignments.","code":""},{"path":[]},{"path":"/news/index.html","id":"documentation-0-8-4","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.8.4 [2013-05-20]","text":"CRAN POLICY: Now Rd \\usage{} lines 90 characters long.","code":""},{"path":[]},{"path":"/news/index.html","id":"performance-and-memory-0-8-3","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.8.3 [2013-05-10]","text":"SPEEDUP: binCounts() binMeans() now uses Hoare’s Quicksort presorting x counting/averaging. also longer test every iteration (== every data point) whether last bin reached , completing bin.","code":""},{"path":[]},{"path":"/news/index.html","id":"documentation-0-8-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.8.2 [2013-05-02]","text":"Minor corrections updates help pages.","code":""},{"path":"/news/index.html","id":"version-081-2013-05-02","dir":"Changelog","previous_headings":"","what":"Version 0.8.1 [2013-05-02]","title":"Version 0.8.1 [2013-05-02]","text":"CRAN release: 2013-05-02","code":""},{"path":"/news/index.html","id":"bug-fixes-0-8-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.8.1 [2013-05-02]","text":"Native code logSumExp() used invalid check missing value integer argument. Detected Brian Ripley upon CRAN submission.","code":""},{"path":"/news/index.html","id":"version-080-2013-05-01","dir":"Changelog","previous_headings":"","what":"Version 0.8.0 [2013-05-01]","title":"Version 0.8.0 [2013-05-01]","text":"CRAN release: 2013-05-02","code":""},{"path":"/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.8.0 [2013-05-01]","text":"Added logSumExp(lx) (col|row)LogSumExps(lx) accurately computing log(sum(exp(lx))) standalone vectors, row column vectors matrices. Thanks Nakayama (Japan) suggestion contributing draft R.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-7-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.7.1 [2013-04-23]","text":"Added argument preserveShape colRanks(). backward compatibility default preserveShape = FALSE, may change future.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-7-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.7.1 [2013-04-23]","text":"Since v0.6.4, (col|row)Ranks() gave incorrect results integer matrices missing values. Since v0.6.4, (col|row)Medians() integers calculate ties floor(tieAvg).","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.7.0 [2013-01-14]","text":"Now (col|row)Ranks() support \"max\" (default), \"min\" \"average\" argument ties.method. Added system tests validation cases. Thanks Peter Langfelder (UCLA) contributing .","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-6-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.6.4 [2013-01-13]","text":"Added argument ties.method rowRanks() colRanks(), still support \"max\" ().","code":""},{"path":"/news/index.html","id":"code-refactoring-0-6-4","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.6.4 [2013-01-13]","text":"ROBUSTNESS: Lots cleanup internal/native code. Native code integer double cases harmonized now generated common code template. inspired code contributions Peter Langfelder (UCLA).","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-6-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.6.3 [2013-01-13]","text":"Added anyMissing() data type raw, always returns FALSE.","code":""},{"path":"/news/index.html","id":"software-quality-0-6-3","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.6.3 [2013-01-13]","text":"ROBUSTNESS: Added system test anyMissing(). ROBUSTNESS: Now S3 methods declared namespace.","code":""},{"path":"/news/index.html","id":"version-062-2012-11-15","dir":"Changelog","previous_headings":"","what":"Version 0.6.2 [2012-11-15]","title":"Version 0.6.2 [2012-11-15]","text":"CRAN release: 2012-11-16","code":""},{"path":"/news/index.html","id":"software-quality-0-6-2","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.6.2 [2012-11-15]","text":"CRAN POLICY: Made example(weightedMedian) faster.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-6-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.6.1 [2012-10-10]","text":"cases binCounts() binMeans() try go past last bin resulting core dump. binCounts() binMeans() return random/garbage values bins beyond last data point.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.6.0 [2012-10-04]","text":"Added binMeans() fast sample-mean calculation bins. Thanks Martin Morgan Fred Hutchinson Cancer Research Center, Seattle, contributing core code . Added binCounts() fast element counting bins.","code":""},{"path":"/news/index.html","id":"version-053-2012-09-10","dir":"Changelog","previous_headings":"","what":"Version 0.5.3 [2012-09-10]","title":"Version 0.5.3 [2012-09-10]","text":"CRAN release: 2012-09-13","code":""},{"path":"/news/index.html","id":"software-quality-0-5-3","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.5.3 [2012-09-10]","text":"CRAN POLICY: Replaced .Internal(psort(...)) call call new internal partial sorting function, utilizes native rPsort() part R internals.","code":""},{"path":"/news/index.html","id":"version-052-2012-07-02","dir":"Changelog","previous_headings":"","what":"Version 0.5.2 [2012-07-02]","title":"Version 0.5.2 [2012-07-02]","text":"CRAN release: 2012-07-03","code":""},{"path":"/news/index.html","id":"code-refactoring-0-5-2","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.5.2 [2012-07-02]","text":"Updated package dependencies match CRAN.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-5-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.5.1 [2012-06-25]","text":"GENERALIZATION: Now (col|row)Prods() handle missing values.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-5-1","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.5.1 [2012-06-25]","text":"Package now imports methods package.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.5.1 [2012-06-25]","text":"certain cases, (col|row)Prods() return NA instead 0 elements. Added redundancy test case. Thanks Brenton Kenkel University Rochester reporting .","code":""},{"path":"/news/index.html","id":"version-050-2012-04-16","dir":"Changelog","previous_headings":"","what":"Version 0.5.0 [2012-04-16]","title":"Version 0.5.0 [2012-04-16]","text":"CRAN release: 2012-05-06","code":""},{"path":"/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.5.0 [2012-04-16]","text":"Added weightedMad() aroma.core v2.5.0. Added weightedMedian() aroma.light v1.25.2.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-5-0","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.5.0 [2012-04-16]","text":"package longer depends aroma.light package functions. Now package imports R.methodsS3, meaning longer loads R.methodsS3 loaded.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-4-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.4.5 [2012-03-19]","text":"Updated default argument centers rowMads()/colMads() explicitly (col|row)Medians(x,...). default behavior changed.","code":""},{"path":"/news/index.html","id":"version-044-2012-03-05","dir":"Changelog","previous_headings":"","what":"Version 0.4.4 [2012-03-05]","title":"Version 0.4.4 [2012-03-05]","text":"CRAN release: 2012-03-06","code":""},{"path":"/news/index.html","id":"software-quality-0-4-4","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.4.4 [2012-03-05]","text":"ROBUSTNESS: Added system/redundancy tests rowMads()/colMads(). CRAN: Made system tests “lighter” default, full tests can still run, cf. tests/*.R scripts.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-4-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.4.4 [2012-03-05]","text":"colMads() return incorrect estimates. bug introduced matrixStats v0.4.0 (2011-11-11).","code":""},{"path":"/news/index.html","id":"version-043-2011-12-11","dir":"Changelog","previous_headings":"","what":"Version 0.4.3 [2011-12-11]","title":"Version 0.4.3 [2011-12-11]","text":"CRAN release: 2011-12-13","code":""},{"path":"/news/index.html","id":"bug-fixes-0-4-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.4.3 [2011-12-11]","text":"rowMedians(..., na.rm = TRUE) handle NaN (NA). reason native code used ISNA() test NA NaN, ISNAN(), opposite .na() .nan() R level work. Added system tests case.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-4-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.4.2 [2011-11-29]","text":"Added rowAvgsPerColSet() colAvgsPerRowSet().","code":""},{"path":[]},{"path":"/news/index.html","id":"documentation-0-4-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.4.1 [2011-11-25]","text":"Added help pages example rowIQRs() colIQRs(). Added example rowQuantiles().","code":""},{"path":"/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.4.1 [2011-11-25]","text":"rowIQRs() colIQRs() return 25% 75% quantiles, difference . Thanks Pierre Neuvial CNRS, Evry, France report.","code":""},{"path":"/news/index.html","id":"version-040-2011-11-11","dir":"Changelog","previous_headings":"","what":"Version 0.4.0 [2011-11-11]","title":"Version 0.4.0 [2011-11-11]","text":"CRAN release: 2011-11-12","code":""},{"path":"/news/index.html","id":"significant-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Significant Changes","title":"Version 0.4.0 [2011-11-11]","text":"Dropped previously introduced expansion center rowMads() colMads(). added unnecessary overhead needed.","code":""},{"path":"/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.4.0 [2011-11-11]","text":"Added rowRanks() colRanks(). Thanks Hector Corrada Bravo (University Maryland) Harris Jaffee (John Hopkins).","code":""},{"path":"/news/index.html","id":"version-030-2011-10-13","dir":"Changelog","previous_headings":"","what":"Version 0.3.0 [2011-10-13]","title":"Version 0.3.0 [2011-10-13]","text":"CRAN release: 2011-10-14","code":""},{"path":"/news/index.html","id":"performance-and-memory-0-3-0","dir":"Changelog","previous_headings":"","what":"Performance and Memory","title":"Version 0.3.0 [2011-10-13]","text":"SPEEDUP/LESS MEMORY: colMedians(x) longer uses rowMedians(t(x)); instead now optimized native-code implementation. Also, colMads() utilizes new colMedians() directly. improvement kindly contributed Harris Jaffee Biostatistics John Hopkins, USA.","code":""},{"path":"/news/index.html","id":"software-quality-0-3-0","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.3.0 [2011-10-13]","text":"Added additional unit tests colMedians() rowMedians().","code":""},{"path":"/news/index.html","id":"version-022-2010-10-06","dir":"Changelog","previous_headings":"","what":"Version 0.2.2 [2010-10-06]","title":"Version 0.2.2 [2010-10-06]","text":"CRAN release: 2010-10-12","code":""},{"path":"/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.2.2 [2010-10-06]","text":"Now result (col|row)Quantiles() contains column names.","code":""},{"path":"/news/index.html","id":"version-021-2010-04-05","dir":"Changelog","previous_headings":"","what":"Version 0.2.1 [2010-04-05]","title":"Version 0.2.1 [2010-04-05]","text":"CRAN release: 2010-04-05","code":""},{"path":"/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.2.1 [2010-04-05]","text":"Added startup message package loaded.","code":""},{"path":"/news/index.html","id":"code-refactoring-0-2-1","dir":"Changelog","previous_headings":"","what":"Code Refactoring","title":"Version 0.2.1 [2010-04-05]","text":"CLEANUP: Removed obsolete internal .First.lib() .Last.lib().","code":""},{"path":[]},{"path":"/news/index.html","id":"documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.2.0 [2010-03-30]","text":"Fixed incorrect cross references.","code":""},{"path":"/news/index.html","id":"version-019-2010-02-03","dir":"Changelog","previous_headings":"","what":"Version 0.1.9 [2010-02-03]","title":"Version 0.1.9 [2010-02-03]","text":"CRAN release: 2010-02-04","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-9","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.1.9 [2010-02-03]","text":"(col|row)WeightedMeans(..., na.rm = TRUE) incorrectly treat missing values zeros. Added corresponding redundancy tests (also median case). Thanks Pierre Neuvial reporting .","code":""},{"path":"/news/index.html","id":"version-018-2009-11-13","dir":"Changelog","previous_headings":"","what":"Version 0.1.8 [2009-11-13]","title":"Version 0.1.8 [2009-11-13]","text":"CRAN release: 2009-11-13","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-8","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.1.8 [2009-11-13]","text":"colRanges(x) return matrix wrong dimension x missing values. affect functions relying colRanges(), e.g. colMins() colMaxs(). Added redundancy test case. Thanks Pierre Neuvial UC Berkeley reporting . (col|row)Ranges() return matrix dimension names.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-0-1-7","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.1.7 [2009-06-20]","text":"WORKAROUND: use \"%#x\" rowTabulates() creating column names result matrix. gave error OSX R v2.9.0 devel (2009-01-13 r47593b) current OSX server R-forge.","code":""},{"path":"/news/index.html","id":"version-016-2009-06-17","dir":"Changelog","previous_headings":"","what":"Version 0.1.6 [2009-06-17]","title":"Version 0.1.6 [2009-06-17]","text":"CRAN release: 2009-06-18","code":""},{"path":"/news/index.html","id":"documentation-0-1-6","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.1.6 [2009-06-17]","text":"Updated help example rowWeightedMedians() run conditionally aroma.light, suggested package - required one. order prevent R CMD    check fail CRAN, prevents building binaries (currently happens OSX servers).","code":""},{"path":"/news/index.html","id":"version-015-2009-02-04","dir":"Changelog","previous_headings":"","what":"Version 0.1.5 [2009-02-04]","title":"Version 0.1.5 [2009-02-04]","text":"CRAN release: 2009-06-14","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.1.5 [2009-02-04]","text":"errors rowOrderStats(), stack become UNPROTECTED calling error.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.1.4 [2009-02-02]","text":"Added methods (col|row)Weighted(Mean|Median)s() weighted averaging.","code":""},{"path":"/news/index.html","id":"documentation-0-1-4","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Version 0.1.4 [2009-02-02]","text":"Added help functions.","code":""},{"path":"/news/index.html","id":"software-quality-0-1-4","dir":"Changelog","previous_headings":"","what":"Software Quality","title":"Version 0.1.4 [2009-02-02]","text":"Package passes R CMD check flawlessly.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-1-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.1.3 [2008-07-30]","text":"Added (col|row)Tabulates() integer raw matrices.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Version 0.1.3 [2008-07-30]","text":"rowCollapse() broken returned wrong elements.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-1-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.1.2 [2008-04-13]","text":"Added (col|row)Collapse(). Added varDiff(), sdDiff(), madDiff(). Added indexByRow().","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-1-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.1.1 [2008-03-25]","text":"Added (col|row)OrderStats(). Added (col|row)Ranges() (col|row)(Min|Max)s(). Added colMedians(). Now anyMissing() support data types structures.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"Version 0.1.0 [2007-11-26]","text":"Imported rowNnn() methods Biobase. Created.","code":""}]
